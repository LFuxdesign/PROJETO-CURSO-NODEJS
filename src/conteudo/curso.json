{
    "tituloCurso": "Introdu√ß√£o ao <svg width=\"2500\" height=\"708\" viewBox=\"0 0 512 145\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\"><g fill=\"#83CD29\"><path d=\"M471.05 51.611c-1.244 0-2.454.257-3.525.863l-33.888 19.57c-2.193 1.264-3.526 3.65-3.526 6.189v39.069c0 2.537 1.333 4.92 3.526 6.187l8.85 5.109c4.3 2.119 5.885 2.086 7.842 2.086 6.366 0 10.001-3.863 10.001-10.576V81.542c0-.545-.472-.935-1.007-.935h-4.245c-.544 0-1.007.39-1.007.935v38.566c0 2.975-3.1 5.968-8.13 3.453l-9.21-5.396c-.326-.177-.576-.49-.576-.863v-39.07c0-.37.247-.747.576-.935L470.547 57.8a.998.998 0 0 1 1.007 0l33.817 19.498c.322.194.576.553.576.936v39.069c0 .373-.188.755-.504.935l-33.889 19.498c-.29.173-.69.173-1.007 0l-8.706-5.18a.905.905 0 0 0-.863 0c-2.403 1.362-2.855 1.52-5.109 2.302-.555.194-1.398.495.288 1.44l11.368 6.69a6.995 6.995 0 0 0 3.526.936 6.949 6.949 0 0 0 3.525-.935l33.889-19.499c2.193-1.275 3.525-3.65 3.525-6.187v-39.07c0-2.538-1.332-4.92-3.525-6.187l-33.889-19.57c-1.062-.607-2.28-.864-3.525-.864z\" /><path d=\"M480.116 79.528c-9.65 0-15.397 4.107-15.397 10.937 0 7.408 5.704 9.444 14.966 10.36 11.08 1.085 11.943 2.712 11.943 4.893 0 3.783-3.016 5.396-10.144 5.396-8.957 0-10.925-2.236-11.584-6.691-.078-.478-.447-.864-.936-.864h-4.389c-.54 0-1.007.466-1.007 1.008 0 5.703 3.102 12.447 17.916 12.447 10.723 0 16.908-4.209 16.908-11.584 0-7.31-4.996-9.273-15.398-10.648-10.51-1.391-11.512-2.072-11.512-4.533 0-2.032.85-4.75 8.634-4.75 6.954 0 9.524 1.5 10.577 6.189.092.44.48.791.935.791h4.39c.27 0 .532-.166.719-.36.184-.207.314-.44.288-.719-.68-8.074-6.064-11.872-16.909-11.872z\" /></g><path d=\"M271.821.383a2.181 2.181 0 0 0-1.08.287 2.18 2.18 0 0 0-1.079 1.871v55.042c0 .54-.251 1.024-.719 1.295a1.501 1.501 0 0 1-1.511 0l-8.994-5.18a4.31 4.31 0 0 0-4.317 0l-35.903 20.721c-1.342.775-2.158 2.264-2.158 3.814v41.443c0 1.548.817 2.966 2.158 3.741l35.903 20.722a4.3 4.3 0 0 0 4.317 0l35.903-20.722a4.308 4.308 0 0 0 2.159-3.741V16.356a4.386 4.386 0 0 0-2.23-3.814L272.9.598c-.335-.187-.707-.22-1.079-.215zM40.861 52.115c-.684.027-1.328.147-1.942.503L3.015 73.34a4.3 4.3 0 0 0-2.158 3.741L.929 132.7c0 .773.399 1.492 1.079 1.87a2.096 2.096 0 0 0 2.159 0l21.297-12.231c1.349-.802 2.23-2.196 2.23-3.742V92.623c0-1.55.815-2.972 2.159-3.742l9.065-5.252a4.251 4.251 0 0 1 2.159-.576c.74 0 1.5.185 2.158.576l9.066 5.252a4.296 4.296 0 0 1 2.159 3.742v25.973c0 1.546.89 2.95 2.23 3.742l21.297 12.232a2.096 2.096 0 0 0 2.159 0 2.164 2.164 0 0 0 1.08-1.871l.07-55.618a4.28 4.28 0 0 0-2.158-3.741L43.235 52.618c-.607-.356-1.253-.475-1.942-.503h-.432zm322.624.503c-.75 0-1.485.19-2.158.576l-35.903 20.722a4.306 4.306 0 0 0-2.159 3.741V119.1c0 1.559.878 2.971 2.23 3.742l35.616 20.29c1.315.75 2.921.807 4.245.07l21.585-12.015c.685-.38 1.148-1.09 1.151-1.87a2.126 2.126 0 0 0-1.079-1.871l-36.119-20.722c-.676-.386-1.151-1.167-1.151-1.943v-12.95c0-.775.48-1.485 1.151-1.871l11.224-6.476a2.155 2.155 0 0 1 2.159 0L375.5 89.96a2.152 2.152 0 0 1 1.08 1.87v10.217a2.15 2.15 0 0 0 1.079 1.87c.673.389 1.487.39 2.158 0L401.331 91.4a4.325 4.325 0 0 0 2.159-3.742v-10c0-1.545-.82-2.966-2.159-3.742l-35.687-20.722a4.279 4.279 0 0 0-2.159-.575zm-107.35 30.939c.188 0 .408.046.576.143l12.304 7.123c.334.193.576.55.576.935v14.246c0 .387-.24.743-.576.936l-12.304 7.123a1.088 1.088 0 0 1-1.079 0l-12.303-7.123c-.335-.194-.576-.549-.576-.936V91.758c0-.386.242-.74.576-.935l12.303-7.122a.948.948 0 0 1 .504-.143v-.001z\" fill=\"#404137\" /><path d=\"M148.714 52.402c-.748 0-1.488.19-2.158.576l-35.903 20.65c-1.343.773-2.159 2.265-2.159 3.813v41.443c0 1.55.817 2.966 2.159 3.742l35.903 20.721a4.297 4.297 0 0 0 4.317 0l35.903-20.721a4.308 4.308 0 0 0 2.158-3.742V77.441c0-1.55-.816-3.04-2.158-3.813l-35.903-20.65a4.297 4.297 0 0 0-2.159-.576zM363.413 89.385c-.143 0-.302 0-.431.072l-6.907 4.029a.84.84 0 0 0-.432.72v7.914c0 .298.172.571.432.72l6.907 3.957c.259.15.535.15.791 0l6.907-3.958a.846.846 0 0 0 .432-.719v-7.915a.846.846 0 0 0-.432-.719l-6.907-4.03c-.128-.075-.216-.07-.36-.07z\" fill=\"#83CD29\" /></svg>, o front-end que virou back-end",
    "descricao": "Neste curso, voc√™ aprender√° o tudo o que precisa para come√ßar a programar em Node.js e tirar suas ideias do papel, com uma did√°tica simples, pr√°tica e eficiente!",
    "modulos": [
        {
            "titulo": "üöÄ Introdu√ß√£o ao Node.Js",
            "descricao": "Entenda o que √© o Node.js, por que ele √© t√£o utilizado e como instal√°-lo corretamente. Configure o npm e execute seu primeiro script no ambiente Node.js.",
            "pathImgModulo": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
            "categoria": "introdu√ß√£o",
            "duracao": "1h",
            "colors": {
                "main": "#3784D1",
                "background": "#C4DBF2"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "O que √© Node.js?",
                        "descricao": "Descubra o que √© o Node.js, suas principais caracter√≠sticas e por que ele √© amplamente utilizado no desenvolvimento backend.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "Node.js √© um ambiente de execu√ß√£o JavaScript que permite executar c√≥digo JavaScript no lado do servidor, proporcionando uma alternativa altamente eficaz para a constru√ß√£o de servidores de aplica√ß√£o. Criado por Ryan Dahl e lan√ßado em maio de 2009, Node.js utiliza o motor V8 JavaScript da Google e introduz um modelo de programa√ß√£o baseado em um loop de eventos ass√≠ncrono, que permite a execu√ß√£o de opera√ß√µes de entrada e sa√≠da sem bloqueios.",
                                "pathImgInferior": "/assets/Exemplo/resumo Ryan Dahl.jpg",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Ryan Dahl desenvolveu Node.js inspirado pelo processo de carregamento de arquivos no Flickr e observando que servidores como o Apache gerenciavam conex√µes de forma ineficaz. Dahl percebeu a necessidade de um ambiente capaz de gerenciar milhares de conex√µes simult√¢neas sem se tornar bloqueante, e assim nasceu o Node.js.<br/><br/>&#9‚Ä¢ Motor V8 da Google: Node.js utiliza o motor V8, que √© conhecido por sua alta performance na execu√ß√£o de c√≥digo JavaScript.<br/>&nbsp;&nbsp;&nbsp;&nbsp;‚Ä¢ Loop de Eventos Ass√≠ncrono: A principal inova√ß√£o de Node.js √© seu loop de eventos ass√≠ncrono, permitindo que opera√ß√µes de entrada e sa√≠da sejam executadas sem bloqueios.<br/>&#9‚Ä¢ Gerenciamento Eficiente de Conex√µes: Node.js √© capaz de lidar com milhares de conex√µes simult√¢neas de maneira eficiente, tornando-o ideal para aplica√ß√µes em tempo real.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "A popularidade de Node.js cresceu rapidamente ap√≥s seu lan√ßamento, especialmente devido √† sua capacidade de lidar com conex√µes simult√¢neas e ao fato de que os desenvolvedores j√° estavam familiarizados com JavaScript, a linguagem predominante no desenvolvimento web. Node.js √© amplamente utilizado para criar aplica√ß√µes de alta performance, como servidores web, APIs e servi√ßos de streaming. Node.js revolucionou o desenvolvimento de aplica√ß√µes web, oferecendo uma solu√ß√£o poderosa e eficiente para o lado do servidor, e continua a ser uma escolha popular entre desenvolvedores por suas caracter√≠sticas inovadoras e desempenho robusto.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Os paradigmais do Node.js",
                        "descricao": "Aqui veremos os paradigmas do Node.js, incluindo a programa√ß√£o ass√≠ncrona e orientada a eventos e objetos, a programa√ß√£o funcional e a modulariza√ß√£o. Esses conceitos s√£o essenciais para criar aplica√ß√µes escal√°veis e eficientes.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://youtu.be/ET59Wd4gP2E",
                        "highlightColor": "#1265E2",
                        "paragrafos": [
                            {
                                "texto": "Um paradigma de programa√ß√£o √© uma abordagem ou estilo fundamental que orienta a forma como solu√ß√µes s√£o desenvolvidas em linguagens de programa√ß√£o. Ele define a estrutura e os elementos que comp√µem um programa, bem como as intera√ß√µes entre eles. Os principais paradigmas incluem:<br/><ol>&#9<li><b>Paradigma Imperativo:</b> Baseia-se na descri√ß√£o de uma sequ√™ncia de instru√ß√µes que alteram o estado do programa at√© alcan√ßar o resultado desejado, focando em descrever &quot;como&quot; um programa deve realizar tarefas atrav√©s de sequ√™ncias de comandos que alteram o estado do sistema. Linguagens como C e Pascal seguem esse paradigma.<br/><br/><b>Caracter√≠sticas:</b><br/>O paradigma Imperativo possui algumas caracter√≠sticas que podem ser definidas como sendo: <br/>&#9‚Ä¢ A <b>√™nfase em &quot;como&quot; realizar as opera√ß√µes</b>;<br/>&#9‚Ä¢ O <b>uso de vari√°veis que armazenam o estado do programa</b>;<br/>&#9‚Ä¢ O <b>controle explicito do fluxo de execu√ß√£o atrav√©s de estruturas como loops e condicionais.</b><br/><br/>Abaixo temos um exemplo em que o c√≥digo instrui explicitamente o computador a somar os n√∫meros de 1 a 5, atualizando o valor de <code>let contador</code></i></b> a cada itera√ß√£o.</li></ol>",
                                "pathImgInferior": "/assets/Exemplo/exemplo paradigma imperativo.png",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "<ol start='2'><li><b>Paradigma Procedural:</b> √â como se fosse uma extens√£o do paradigma imperativo que organiza o c√≥digo em procedimentos ou fun√ß√µes, isso permite que o c√≥digo se torne mais reutiliz√°vel e mais modular, melhorando o processo de desenvolvimento, escrita e leitura e facilitando a manuten√ß√£o do c√≥digo posteriormente.</li></ol>",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "<b>Caracter√≠sticas:</b><br/>Para este paradigma temos as seguintes caracter√≠sticas:<br/>&#9‚Ä¢ <b>Divis√£o do programa em sub-rotinas ou fun√ß√µes</b>;<br/>&#9‚Ä¢ <b>Melhoria da manuten√ß√£o e leitura do c√≥digo</b>;<br/>&#9‚Ä¢ <b>A otimiza√ß√£o do fluxo de trabalho.</b>",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Abaixo, temos um exemplo que mostra como isso funciona, temos uma fun√ß√£o <code>somar</code></i></b> que encapsula a opera√ß√£o de adi√ß√£o, possibilitando a reutiliza√ß√£o da fun√ß√£o infinitas vezes no c√≥digo, fun√ß√£o essa que ir√° retornar o resultado da soma dos par√¢metros <code>a</code></i></b> e <code>b</code></i></b>, isso √© extremamente positivo pois j√° retorna o n√∫mero diretamente no final, por isso que ao usarmos o <code>console.log(resultado)</code></i></b> a sa√≠da que o c√≥digo nos retornar√° √© o pr√≥prio n√∫mero",
                                "pathImgInferior": "/assets/Exemplo/exemplo paradigma procedural.png",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "<ol start='3'>&#9<li><b>Programa√ß√£o Orientada a Objetos (POO): </b> Organiza o c√≥digo em torno de &quot;objetos&quot; que encapsulam dados e comportamentos. Linguagens como Java, C++ e Python adotam esse paradigma. A utiliza√ß√£o do paradigma da Programa√ß√£o Orientada a Objetos (POO) no Node.js melhora a organiza√ß√£o, reutiliza√ß√£o e seguran√ßa do c√≥digo, tornando-o mais modular, escal√°vel e f√°cil de manter. Com conceitos como heran√ßa, encapsulamento e polimorfismo, a POO permite criar sistemas mais estruturados e flex√≠veis.</li></ol>",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "<b>Caracter√≠sticas:</b><br/>Podemos destacar as seguintes caracter√≠sticas do POO no Node.js:<br/>&#9‚Ä¢ <b>Encapsulamento:</b> prote√ß√£o dos dados internos do objeto;<br/>&#9‚Ä¢ <b>Heran√ßa:</b> capacidade de criar classes baseadas (herdadas) em classes existentes;<br/>&#9‚Ä¢ <b>Polimorfismo:</b> permite que diferentes objetos respondam de maneira espec√≠fica a uma mesma mensagem ou m√©todo.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Abaixo temos um exemplo dessa vez sobre o POO sendo aplicado no Node.js, aqui, temos a classe <code>Animal</code></i></b> que tem suas caracter√≠sticas gen√©ricas e seu construtor, o construtor em POO, √© um m√©todo &quot;padr√£o&quot; necess√°rio para que as propriedades (par√¢metros) do objeto sejam inicializadas, imagine aqui as caracter√≠sticas gerais de todo(ou do grupo que esteja definindo) animal faz, neste caso, estamos considerando que todo animal faz um som, portanto, definimos aqui o m√©todo <code>emitirSom()</code></i></b>, que indica ao usu√°rio que o animal esta fazendo um som. Mais abaixo, na linha 9, temos outra classe que est√° &quot;estendendo&quot; da classe gen√©rica <code>Animal</code></i></b>, isso indica que a classe que foi estendida, herdar√° todas as caracter√≠sticas gen√©ricas definidas na classe <code>Animal</code></i></b>, nesse caso, criamos a classe Cachorro, que estende (herdando suas caracter√≠sticas) da classe <code>Animal</code></i></b>, mas, sabemos que o cachorro late, ent√£o, realizamos um o que chamamos de overriding, estamos sobrescrevendo o m√©todo original <code>emitirSom()</code></i></b>, para especificar que, para este animal no caso o cachorro, quando chamarmos o m√©todo <code>emitirSom()</code></i></b>, possamos retornar que o cachorro esta latindo. Nas linhas 14 e 15 estamos criando o que chamamos de Inst√¢ncias das classes criadas, podemos criar quantas inst√¢ncias quisermos, e atribuir a elas os par√¢metros definidos no construtor, nesse caso o nome do animal, e, por fim, nas linhas 16 e 17 estamos &quot;invocando&quot;, o m√©todo <code>emitirSom()</code></i></b> definido nas classes, no caso estamos falando &quot;animal x emita um som&quot;, e o c√≥digo ir√° nos retornar o que pedimos:",
                                "pathImgInferior": "/assets/Exemplo/exemplo paradigma POO.png",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "<ol start='4'>&#9<li><b>Programa√ß√£o Funcional:</b> A programa√ß√£o funcional √© um paradigma que trata a computa√ß√£o como a avalia√ß√£o de fun√ß√µes matem√°ticas, evitando mudan√ßas de estado e dados mut√°veis. Diferentemente da programa√ß√£o imperativa, que se baseia em comandos sequenciais que alteram o estado do programa, a programa√ß√£o funcional descreve o que deve ser alcan√ßado por meio de fun√ß√µes.</li></ol>",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "<b>Caracter√≠sticas:</b><br/>Este paradigma aplicado no Node.js a programa√ß√£o funcional pode ser empregada das seguintes maneiras:<br/>&#9‚Ä¢ <b>Uso de Fun√ß√µes de Alta Ordem:</b> Fun√ß√µes como <code>map</code>, <code>filter</code> e <code>reduce</code> permitem manipular cole√ß√µes de dados de forma declarativa, promovendo um c√≥digo mais conciso e leg√≠vel;<br/>&#9‚Ä¢ <b>Imutabilidade:</b> Embora o JavaScript n√£o imponha imutabilidade por padr√£o, √© poss√≠vel utilizar bibliotecas como Immutable.js para garantir que os dados n√£o sejam alterados ap√≥s a cria√ß√£o, isso permitir√° que os dados, uma vez criados, n√£o s√£o alterados. Em vez disso, novas vers√µes dos dados s√£o geradas quando necess√°rio, o que ajuda a prevenir erros comuns relacionados a altera√ß√µes inesperadas de estado;<br/>&#9‚Ä¢ <b>Fun√ß√µes puras:</b> Escrever fun√ß√µes puras e combin√°-las facilita a cria√ß√£o de aplica√ß√µes modulares e test√°veis no Node.js.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Aqui, temos o exemplo que mostra o paradigma funcional sendo aplicado no Node.js. Aqui, temos a fun√ß√£o <code>multiplicarPorDois</code>, que √© um exemplo de fun√ß√£o pura. Em programa√ß√£o funcional, fun√ß√µes puras s√£o aquelas que, dado um mesmo conjunto de entradas, sempre retornam o mesmo resultado, sem modificar estados externos ou causar efeitos colaterais. Essa fun√ß√£o recebe um n√∫mero como argumento e retorna esse n√∫mero multiplicado por dois.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Logo abaixo, temos a fun√ß√£o <code>aplicarOperacao</code>, que exemplifica o conceito de fun√ß√£o de alta ordem. Em programa√ß√£o funcional, uma fun√ß√£o de alta ordem √© aquela que recebe outra fun√ß√£o como argumento ou retorna uma fun√ß√£o. No nosso caso, <code>aplicarOperacao</code> recebe um array e uma fun√ß√£o, aplicando essa fun√ß√£o a cada elemento do array utilizando o m√©todo <code>map()</code>. O m√©todo <code>map()</code> √© uma caracter√≠stica importante da programa√ß√£o funcional, pois permite transformar cole√ß√µes de dados sem modificar a original, garantindo imutabilidade.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Na linha 10, criamos um array de n√∫meros [1, 2, 3, 4, 5]. Em seguida, chamamos <code>aplicarOperacao</code>, passando esse array e a fun√ß√£o <code>multiplicarPorDois</code> como par√¢metros. O resultado √© um novo array onde cada n√∫mero foi multiplicado por dois, sem alterar o array original. Esse conceito de imutabilidade √© fundamental na programa√ß√£o funcional, pois evita efeitos colaterais e facilita a manuten√ß√£o do c√≥digo.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Por fim, exibimos o resultado no console, que nos retorna [2, 4, 6, 8, 10]. Esse exemplo mostra como o paradigma funcional pode ser aplicado no Node.js para escrever c√≥digo modular, previs√≠vel e mais f√°cil de testar.",
                                "pathImgInferior": "/assets/Exemplo/exemplo paradigma funcional.png",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "<ol start='5'>&#9<li><b>Programa√ß√£o Declarativa:</b> A programa√ß√£o declarativa √© um paradigma que se concentra em descrever o que deve ser feito, sem especificar detalhadamente como realizar as opera√ß√µes. Diferentemente da programa√ß√£o imperativa, que define uma sequ√™ncia expl√≠cita de comandos, a abordagem declarativa permite que o desenvolvedor especifique o resultado desejado, delegando ao sistema a responsabilidade de determinar o fluxo de execu√ß√£o necess√°rio para alcan√ß√°-lo.</li></ol>",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "<b>Caracter√≠sticas:</b><br/>Principais Caracter√≠sticas da Programa√ß√£o Declarativa no Node.js:<br/>&#9‚Ä¢ <b>Abstra√ß√£o de Controle:</b> O programador define o objetivo final, e o sistema gerencia os detalhes de implementa√ß√£o para atingir esse resultado;<br/>&#9‚Ä¢ <b>Imutabilidade e Aus√™ncia de Estado:</b> As opera√ß√µes n√£o dependem de estados internos ou vari√°veis mut√°veis, promovendo previsibilidade e facilitando a depura√ß√£o;<br/>&#9‚Ä¢ <b>Transpar√™ncia Referencial: :</b> Fun√ß√µes ou express√µes produzem o mesmo resultado quando dadas as mesmas entradas, sem efeitos colaterais, permitindo substitui√ß√µes seguras e otimizando o c√≥digo;<br/>&#9‚Ä¢ <b>Concis√£o e Clareza:</b> A sintaxe tende a ser mais enxuta e expressiva, focando no &quot;o qu√™&quot; em vez do &quot;como&quot;, o que melhora a legibilidade e manuten√ß√£o do c√≥digo.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "No contexto do Node.js, a programa√ß√£o declarativa √© frequentemente aplicada por meio de t√©cnicas funcionais e uso de APIs que permitem descrever opera√ß√µes de forma declarativa.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Abaixo temos um exemplo dessa vez sobre o paradigma declarativo sendo aplicado no Node.js. Diferente da programa√ß√£o imperativa, onde descrevemos passo a passo como o programa deve executar cada a√ß√£o, na programa√ß√£o declarativa focamos no que queremos alcan√ßar, deixando que a linguagem e suas fun√ß√µes abstratas lidem com os detalhes da execu√ß√£o. No exemplo abaixo, temos um array de n√∫meros e utilizamos fun√ß√µes declarativas como <code>filter()</code>, <code>map()</code> e <code>reduce()</code> para manipular os dados de forma clara e expressiva, sem precisar de la√ßos ou vari√°veis auxiliares.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Primeiramente, criamos um array de n√∫meros de 1 a 10. Em seguida, definimos a fun√ß√£o <code>ehPar</code>, que verifica se um n√∫mero √© par, e a fun√ß√£o <code>aoQuadrado</code>, que eleva um n√∫mero ao quadrado. Ambas s√£o fun√ß√µes puras, pois sempre retornam o mesmo resultado para os mesmos argumentos, sem causar efeitos colaterais.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Na linha 10, aplicamos a cadeia de m√©todos declarativos: primeiro usamos <code>filter(ehPar)</code>, que retorna apenas os n√∫meros pares do array; depois <code>map(aoQuadrado)</code>, que transforma cada n√∫mero par em seu quadrado; e por fim <code>reduce((acc, val) => acc + val, 0)</code>, que soma todos os valores resultantes. Esse encadeamento de fun√ß√µes evita a necessidade de estruturas imperativas, como <code>for</code> ou <code>while</code>, tornando o c√≥digo mais leg√≠vel e conciso.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Ao final, o c√≥digo nos retorna 220, que √© a soma dos quadrados dos n√∫meros pares do array original. Esse exemplo mostra como a programa√ß√£o declarativa torna o c√≥digo mais expressivo e f√°cil de entender, permitindo que o desenvolvedor foque no resultado desejado, sem se preocupar com os detalhes de implementa√ß√£o.",
                                "pathImgInferior": "/assets/Exemplo/exemplo paradigma declarativo.png",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "<ol start='6'>&#9<li><b>Programa√ß√£o Orientada a Eventos:</b> A Programa√ß√£o Orientada a Eventos √© um paradigma no qual o fluxo de execu√ß√£o de um programa √© determinado por eventos, como intera√ß√µes do usu√°rio, mensagens de outros sistemas ou mudan√ßas de estado. No Node.js, esse paradigma √© fundamental, permitindo a constru√ß√£o de aplica√ß√µes ass√≠ncronas e altamente responsivas.</li></ol>",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "<b>Caracter√≠sticas:</b><br/>Principais Caracter√≠sticas da Programa√ß√£o Orientada a Eventos no Node.js:<br/>&#9‚Ä¢ <b>Assincronicidade:</b> As opera√ß√µes s√£o executadas de forma n√£o bloqueante, permitindo que o programa continue processando outras tarefas enquanto aguarda a conclus√£o de opera√ß√µes anteriores;<br/>&#9‚Ä¢ <b>Emiss√£o e Escuta de Eventos:</b> Componentes do sistema podem emitir eventos, enquanto outros &quot;ouvintes&quot; reagem a esses eventos, facilitando a comunica√ß√£o entre diferentes partes da aplica√ß√£o;<br/>&#9‚Ä¢ <b>Loop de Eventos (Event Loop):</b> Mecanismo central do Node.js que gerencia a execu√ß√£o de opera√ß√µes ass√≠ncronas, despachando eventos e garantindo que as fun√ß√µes de callback correspondentes sejam executadas no momento apropriado.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Abaixo, temos um exemplo que demonstra a aplica√ß√£o da Programa√ß√£o Orientada a Eventos no Node.js. Utilizamos o m√≥dulo events para criar um emissor de eventos personalizado que reage a um evento espec√≠fico.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Primeiro, vamos realizar a importa√ß√£o do m√≥dulo <code>events</code>: Utilizamos o m√≥dulo interno do Node.js chamado <code>events</code>, que fornece a classe <code>EventEmitter</code> para a cria√ß√£o e manipula√ß√£o de eventos. Depois temos a cria√ß√£o de uma classe personalizada <code>MeuEmissor</code>, que estende <code>EventEmitter</code>, permitindo que inst√¢ncias dessa classe emitam e escutem eventos personalizados, e, em seguida temos a instancia√ß√£o do Emissor de Eventos, aqui estamos criando uma inst√¢ncia de <code>MeuEmissor</code> chamada <code>meuEmissor</code>, que ser√° utilizada para emitir e ouvir eventos, depois, realizamos o registro de um Ouvinte de Evento, utilizamos o m√©todo <code>on</code> para registrar uma fun√ß√£o que ser√° executada sempre que o evento '<code>eventoPersonalizado</code>' for emitido. Nesse caso, a fun√ß√£o simplesmente imprime uma mensagem no console, por fim temos a emiss√£o do evento personalizado: Chamamos o m√©todo <code>emit</code> para disparar o evento '<code>eventoPersonalizado</code>', acionando todos os ouvintes registrados para esse evento. Como resultado, a mensagem definida anteriormente √© exibida no console.",
                                "pathImgInferior": "/assets/Exemplo/exemplo paradigma orientada a eventos.png",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "<br/>No geral os paradigmas de programa√ß√£o no Node.js s√£o fundamentais para entender como essa tecnologia se destaca no desenvolvimento de aplica√ß√µes modernas. Ele adota principalmente os paradigmas ass√≠ncrono e orientado a eventos, que permitem um alto desempenho em aplica√ß√µes de rede e sistemas escal√°veis. Al√©m disso, suporta a programa√ß√£o funcional com o uso de fun√ß√µes de ordem superior, promessas e async/await, tornando o c√≥digo mais modular e reutiliz√°vel.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Por outro lado, o paradigma orientado a objetos tamb√©m pode ser utilizado, principalmente com classes do ES6, facilitando a organiza√ß√£o de grandes projetos. No entanto, devido √† natureza do JavaScript, a combina√ß√£o de m√∫ltiplos paradigmas dentro do mesmo projeto √© comum e pode ser ben√©fica.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Em conclus√£o, o Node.js oferece uma abordagem flex√≠vel e eficiente para o desenvolvimento de software, permitindo que os desenvolvedores escolham os paradigmas que melhor se adaptam √†s necessidades do projeto. Seu modelo ass√≠ncrono e n√£o bloqueante, aliado √† versatilidade da linguagem, faz dele uma escolha poderosa para aplica√ß√µes escal√°veis e de alto desempenho.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Conceitos de IDE, instala√ß√£o e configura√ß√£o do VS Code",
                        "descricao": "Aqui voc√™ ir√° descobrir o que √© uma IDE, para que serve, como realizar a instala√ß√£o completa, dicas e configura√ß√£o da IDE do Visual Studio Code",
                        "pathImgSessao": "/assets/Exemplo/EX1 visual ProjeCLP1.png",
                        "pathVideoSessao": "",
                        "highlightColor": "rgb(113 36 197)",
                        "paragrafos": [
                            {
                                "texto": "Depois das configura√ß√µes iniciais, vamos entender um pouco mais sobre a IDE Visual Studio Code, que √© uma das mais utilizadas por desenvolvedores de todo o mundo. Aprenda a criar, editar e salvar arquivos, al√©m de instalar extens√µes e personalizar o ambiente de desenvolvimento.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "/assets/Exemplo/EX2 visual ProjeCLP1.png",
                                "pathVideoSuperior": "",
                                "texto": "Na imagem acima temos a tela inicial da IDE, claro depois das configura√ß√µes pois instala√ß√£o, aqui veremos como na imagem abaixo de Start/Come√ßar as op√ß√µes New File/Novo arquivo, Open File/Abri arquivo, Open Folder/Abri Pasta, Clone Git Repository/ Clonar repositorio do Git, Connect to/ Conectar para. As ultimas duas op√ß√µes vamos aprofundar mais para frente no curso, aqui vamos focar nas primeiras 3 op√ß√µes. Ao clicar em New File vamos gera a seguinte a√ß√£o.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "/assets/Exemplo/EX4 visual ProjeCLP1.png",
                                "pathVideoSuperior": "",
                                "texto": "Aqui nos colocaremos o nome do arquivo que vamos gerar e sua respectiva extens√£o que no Node herda do JavaScript o js. Como no exemplo abaixo vamos criar o arquivo <b>Primeiro Script.js</b>, e logo ap√≥s clicar em Save/Salvar. Apos isso vamos ver a tela de edi√ß√£o do arquivo.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "/assets/Exemplo/EX5 visual ProjeCLP1.png",
                                "pathVideoSuperior": "",
                                "texto": "E assim come√ßa a divers√£o! Aqui vamos escrever nosso primeiro c√≥digo em Node.js, que ser√° um simples console.log(‚ÄúHello World!‚Äù). Para executar o c√≥digo, basta clicar no bot√£o Run/Executar, que fica no canto superior direito da tela. Pronto! Voc√™ acaba de executar seu primeiro script em Node.js.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "/assets/Exemplo/EX6 visual ProjeCLP1.png",
                                "texto": "Uma segunda forma √© ir direto no Terminal/CMD como a imagem acima explicita, √© um pouco mais complicado mas n√£o imposs√≠vel! Assim simplesmente usar o c√≥digo <b>cd 'diretorio'</b> para link a pasta do arquivo e usa o <b>node 'Primeiro Script.js'</b> e pressiona enter, assim mostra as imagens abaixo.",
                                "pathImgInferior": "/assets/Exemplo/EX7 visual ProjeCLP1.png"
                            },
                            {
                                "pathImgSuperior": "/assets/Exemplo/EX8 visual ProjeCLP1.png",
                                "texto": "Depois de ter come√ßado um projeto pode salvar o arquivo em file depois save e aproveitar para ativar o autosave para a cada mudan√ßa n√£o seja perdida! E caso vem ter um acesso futuro no arquivo pode o acess√°-lo em Open File da tela inicial e se quiser abri uma pasta inteira dos arquivos do seu projeto pode-se usar o Open Folder.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "texto": "O Open Folder √© claro a op√ß√£o mais interessante ao us√°-lo pode se visualizar seu projeto na op√ß√£o abaixo.",
                                "pathImgInferior": "/assets/Exemplo/EX3 visual ProjeCLP1.png"
                            },
                            {
                                "texto": "E visualizar mais o menos assim na imagem abaixo na √°rea de EXPLORER. Na imagem temos em uma tela o exemplo do Primeiro Script e outro de uma expectativa de futuro a ti aluno!",
                                "pathImgInferior": "/assets/Exemplo/EX9 visual ProjeCLP1.png"
                            },
                            {
                                "texto": "E assim terminamos o primeiro modulo, com a execu√ß√£o do primeiro script em Node.js. Parab√©ns! Voc√™ est√° no caminho certo para se tornar um desenvolvedor backend de sucesso."
                            }
                        ]
                    },
                    {
                        "titulo": "Como come√ßar um projeto Node.js e as configura√ß√µes iniciais",
                        "descricao": "Aprenda a instalar o Node.js, configurar um projeto do zero e preparar seu ambiente de desenvolvimento.",
                        "pathImgSessao": "/assets/CAPA CURSO.png",
                        "pathVideoSessao": "",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "texto": "<a href='https://nodejs.org' target='_black'>Site de instala√ß√£o</a> logo no cabe√ßalho estar√° a op√ß√£o descarregar/Download. Logo ao carregar a p√°gina ficara dispon√≠vel as op√ß√µes que ser√° claramente de sua escolha e vontade! Mas por padr√£o ser√° baseado pela a configura√ß√£o de sua maquina. No Linux temos a op√ß√£o de usar o terminal para a instala√ß√£o podendo ser at√© mais segura, executando o simples c√≥digo sudo apt-get install Node.js. <a href='https://www.youtube.com/watch?v=tpzFsrEJm1A' target='_blank'>assista aqui o tutorial!</a>",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Para ter mais liberdade e praticidade no desenvolvimento do c√≥digo utilizaremos sempre uma IDE( Integrated Development Environment/ Ambiente de Desenvolvimento Integrado), no universo dos programadores tem diversas op√ß√£o como Android Studio, NetBeans, Eclipse‚Ä¶ Mas aqui vamos usar o Visual Studio Code/VS, o link √© nada mas que <a href='https://code.visualstudio.com/' target='_blank'>site de instala√ß√£o</a> logo na pagina principal estar√° as op√ß√£o de download, a instala√ß√£o ocorre como qualquer outro software, sem maiores dificuldade tanto no windows ou linux. A configura√ß√£o tamb√©m √© bastante intuitiva de escolha personalizada, sendo assim configure da forma que achar melhor, n√£o tens muitas configura√ß√£o t√©cnica na p√°gina de entrada, somente ensinos e escolha de comportamento da IA e themes.",
                                "pathImgInferior": "/assets/Exemplo/Ex1.png",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Executando o primeiro script",
                        "descricao": "Escreva e execute seu primeiro script no terminal, entendendo os conceitos basicos de JavaScript e Node.js.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://youtu.be/DiNLHjzn818",
                        "highlightColor": "#68EC13",
                        "paragrafos": [
                            {
                                "texto": "Depois de instalado o software do Node, podemos dependendo do sistema operacional utilizar o cmd/terminal para executar alguns comandos. Veja o exemplo do video acima!",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "texto": "Entendendo mais abaixo sobre o JavaScript e Node!"
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Segundo o livro: <b><i>Aprendendo JavaScript / Filipe Del Nero Grillo e Renata Pontin de Mattos Fortes</b></i>. Sumario 2 : A linguagem JavaScript foi criada pela Netscape Communications Corporation e foi desenvolvida com o nome de Mocha, depois passou a se chamar LiveScript e foi finalmente lan√ßada como JavaScript em 1995 integrando a vers√£o 2.0B3 do navegador Netscape e visava implementar uma tecnologia de processamento modo cliente. A denomina√ß√£o da linguagem, JavaScript, se deve a similaridades com a sintaxe do Java e embora as duas linguagens n√£o tenham nenhuma outra rela√ß√£o al√©m desta, os nomes ainda causam confus√£o para alguns usu√°rios. Mais tarde, a linguagem tornou-se um padr√£o da ECMA (European Computer Manufacturers Association) que atualmente √© seguido por outros desenvolvedores como os da Adobe com a linguagem ActionScript. A implementa√ß√£o da Microsoft do ECMAScript √© chamada de JScript ou ActiveScript, popularmente conhecido como ActiveX, usada nos navegadores Internet Explorer. JavaScript permite criar pequenos programas embutidos no pr√≥prio c√≥digo de uma p√°gina HTML e capazes de gerar n√∫meros, processar alguns dados, verificar formul√°rios, alterar valor de elementos HTML e criar elementos HTML. Tudo isso diretamente no computador cliente, evitando a troca de informa√ß√µes com o servidor e o tempo passa a depender somente do processamento local do cliente, n√£o mais da lat√™ncia da rede.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "texto": "Segundo o livro: <b><i>Aplica√ß√µes web real-time com Nodejs / Casa do C√≥digo/ Caio Ribeiro Pereira</b></i>. Sumario 1.1 O problema das arquiteturas bloqueantes: Os sistemas para web desenvolvidos sobre plataforma .NET, Java, PHP, Ruby ou Python possuem uma caracter√≠stica em comum: eles paralisam um processamento enquanto utilizam um I/O no servidor. Essa paralisa√ß√£o √© conhecida como modelo bloqueante (Blocking-Thread). Em um servidor web podemos visualiz√°-lo de forma ampla e funcional. Vamos considerar que cada processo √© requisi√ß√£o feita pelo usu√°rio. Com o decorrer da aplica√ß√£o, novos usu√°rios v√£o acessando-a, gerando uma requisi√ß√£o no servidor. . Um sistema bloqueante enfileira cada requisi√ß√£o e depois as processa, uma a uma, n√£o permitindo m√∫ltiplos processamentos delas. Enquanto uma requisi√ß√£o √© processada as demais ficam em espera, mantendo por um per√≠odo de tempo uma fila de requisi√ß√µes ociosas. Esta √© uma arquitetura cl√°ssica, existente em diversos sistemas pelo qual possui um design ineficiente. √â gasto grande parte do tempo mantendo uma fila ociosa enquanto √© executado um I/O. Tarefas como enviar e-mail, consultar o banco de dados, leitura em disco, s√£o exemplos de tarefas que gastam uma grande fatia desse tempo, bloqueando o sistema inteiro enquanto n√£o s√£o finalizadas. Com o aumento de acessos no sistema, a frequ√™ncia de gargalos ser√£o mais frequentes, aumentando a necessidade de fazer um upgrade nos hardwares dos servidores. Mas upgrade das m√°quinas √© algo muito custoso, o ideal seria buscar novas tecnologias que fa√ßam bom uso do hardware existente, que utilizem ao m√°ximo o poder do processador atual, n√£o o mantendo ocioso quando o mesmo realizar tarefas do tipo bloqueante. 1.2 E assim nasceu o Node.js: Foi baseado neste problema que, no final de 2009, Ryan Dahl com a ajuda inicial de 14 colaboradores criou o Node.js. Esta tecnologia possui um modelo inovador, sua arquitetura √© totalmente non-blocking thread (n√£o-bloqueante), apresentando uma boa performance com consumo de mem√≥ria e utilizando ao m√°ximo e de forma eficiente o poder de processamento dos servidores, principalmente em sistemas que produzem uma alta carga de processamento. Usu√°rios de sistemas Node est√£o livres de aguardarem por muito tempo o resultado de seus processos, e principalmente n√£o sofrer√£o de dead-locks no sistema, porque nada bloqueia em sua plataforma e desenvolver sistemas nesse paradigma √© simples e pr√°tico. 1.3 Single-thread: Suas aplica√ß√µes ser√£o single-thread, ou seja, cada aplica√ß√£o ter√° inst√¢ncia de um √∫nico processo. Se voc√™ esta acostumado a trabalhar com programa√ß√£o concorrente em plataforma multi-thread, infelizmente n√£o ser√° poss√≠vel com Node, mas saiba que existem outras maneiras de se criar um sistema concorrente, como por exemplo, utilizando clusters, que √© um m√≥dulo nativo do Node.js e √© super f√°cil de implement√°-lo. Outra maneira √© utilizar ao m√°ximo a programa√ß√£o ass√≠ncrona."
                            }
                        ]
                    }
                ]
            }
        },
        {
            "titulo": "üì¶ Gerenciamento de pacotes via NPM",
            "descricao": "Veja como funciona o sistema de gerenciamento de pacotes do Node.js e como realizar instala√ß√µes, exclus√µes, atualiza√ß√µes e checagem de vers√µes do pacote, mantendo os pacotes atualizados e seguros.",
            "pathImgModulo": "",
            "categoria": "NPM",
            "duracao": "1h",
            "colors": {
                "main": "#9E1515",
                "background": "#E3B8B8"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "Como funciona o sistema de gerenciamento de pacotes do Node.js?",
                        "descricao": "Entenda o papel do npm, como funcionam os pacotes e sua import√¢ncia na gest√£o de depend√™ncias.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "NPM √© um gerenciador de pacote instalado junto ao pr√≥prio Nodejs. √â como se fosse a playstore do android que se encontra diversas aplica√ß√µes a ser utilizadas em seu projeto com fundamento poupar tempo e facilitar a vida do programador. Dentro desse cursos vamos usar algumas como exemplo o Express.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Um dos paradigmas fundamentais que temos que ter em mente sobre o Nodejs √© que o mesmo √© modularizado, por isso teremos muitos callbacks de entrada e sa√≠da e usaremos muito em todos os projetos em vida o require(). O NPM significa Node Package Manager e esse pacotes s√£o m√≥dulos, os mais famosos s√£o o Express, Nodemon, Cors, Pm2 dentre outros. Os c√≥digos b√°sicos s√£o <strong>npm install nome_do_pacote</strong>/ para instalar o modulo. <b>npm -g install nome_do_pacote</b>// Para instalar o modulo usando o reposit√≥rio global. <b>npm install nome_do_pacote --savedev</b>// para instalar o modulo com depend√™ncia na maquina assim n√£o ficar√° s√≥ no projeto ‚Äú√© como se fosse executar o modulo com permiss√£o de administrado no PC‚Äù. <b>npm remove nome_do_pacote</b>// desinstala o pacote do projeto em quest√£o. C√≥digo recomendado a utilizar ao instalar o pacote <b>npm install -g nome_do_pacote --savedev</b>.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Conceito de depend√™ncias",
                        "descricao": "Aprenda o que s√£o depend√™ncias, a diferen√ßa entre depend√™ncias de produ√ß√£o e desenvolvimento e como gerenci√°-las.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "No desenvolvimento de software com Node.js, o conceito de depend√™ncias refere-se a m√≥dulos, bibliotecas ou pacotes externos que seu projeto precisa para funcionar corretamente. Essas depend√™ncias podem ser bibliotecas de terceiros, frameworks, ferramentas de constru√ß√£o, ou at√© mesmo outros m√≥dulos que voc√™ mesmo criou.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Bem , temos diversos tipos de depend√™ncia vamos explicar um por um. <b>Depend√™ncia Padr√£o</b> s√£o pacotes essenciais para o funcionamento em produ√ß√£o com j√° citado express, lodash, axios‚Ä¶ todos s√£o listado em arquivo chamado package.json na chave <i>dependencies</i>. <b>Depend√™ncia Opcionais</b> s√£o pacotes que se n√£o poderem ser instalados, n√£o dever√£o impedir a instala√ß√£o nem o funcionamento do projeto, usa-se esse recurso quando tens pacote especifico que pode  haver de n√£o estar dispon√≠veis em todos os sistemas operacionais, s√£o listada no arquivo package.json na chave <i>optinalDependencies</i>. <b>Depend√™ncias de Desenvolvimento</b> s√£o pacotes necess√°rios s√≥ durante a produ√ß√£o do projeto, mas n√£o para o projeto em si na sua instala√ß√£o e funcionamento. Exemplos eslint, jest, typescript‚Ä¶ s√£o listada no arquivo package.json na chave <i>devDependencies</i>. <b>Depend√™ncias de pares</b> s√£o pacotes que o projeto necessita que o usu√°rio tenha instalado na maquina e n√£o pode ser instalado de forma autom√°tica, mas sim manual! Como plugins ou biblioteca exemplo webpack, isso tamb√©m s√£o listada no arquivo package.json na chave <i>peerDependencies</i>.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Como instalar pacotes do Node.js", 
                        "descricao": "Veja como instalar pacotes globais e locais usando npm ou yarn, al√©m de entender o package.json e o node_modules.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "",
                        "highlightColor": "#68EC13",
                        "paragrafos": [
                            {
                                "texto": "Entra no terminal/cmd: digita <b>npm install nome_do_modulo</b>. O resultado √© similar ao da imagem abaixo como quantidade de pacotes feito download, quantidade de pacotes auditado, quantidade de pacotes enxergado e encontrado e quantidade de vulnerabilidades. Na aba explore depois do pacote ser instalado vai surgir uma pasta chamado <b>node_modules</b> e tamb√©m um aquivo <i>package.json</i> e <i>package-lock.json</i>",
                                "pathImgInferior": "../assets/Exemplo/npm ex1.png",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Como remover pacotes do Node.js",
                        "descricao": "Aprenda a desinstalar pacotes corretamente, garantindo a limpeza do projeto e a organiza√ß√£o das depend√™ncias.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "",
                        "highlightColor": "#F28318",
                        "paragrafos": [
                            {
                                "texto": "Para remover pacotes no nodejs usamos o <b>npm remove nome_do_pacote</b>, bem simples e claro!",
                                "pathImgInferior": "../assets/Exemplo/npm remove.png",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Depois da execu√ß√£o do c√≥digo vai aparecer a quantidade de pacotes removido,auditado e vulner√°veis. E a pasta node_modules vai ser limpa e o arquivo package.json vai ser atualizado.",
                                "pathImgInferior": "../assets/Exemplo/npm remove 2.png",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Como atualizar pacotes do Node.js e gerenciamento de vers√µes de pacotes",
                        "descricao": "Descubra como atualizar pacotes, lidar com vers√µes espec√≠ficas e utilizar o package-lock.json para manter a compatibilidade.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#7515ED",
                        "paragrafos": [
                            {
                                "texto": "Para atualizar os pacotes, podemos come√ßar pela verifica√ß√£o do pacotes, usando <b>npm outdated</b>, para atualizar os pacotes de acordo com as configura√ß√µes do <i>package.json</i>, caso queira atualizar um projeto especifico pode-se usar <b>npm update nome_do_pacote</b>. Caso queira testa o modulo instalado pode-se usar npx, para verificar se a instalado em sua maquina pode usar <b>which npx</b>, caso n√£o ha pode-se usar <b>npm install -g npx</b>, para atualizar para vers√µes mais recente usa-se <b>npx npm-check-update -u npm install</b>.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        },
        {
            "titulo": "üßë‚Äçüíª Fundamentos do JavaScript no Node.js",
            "descricao": "Revise os principais conceitos do JavaScript, e, entenda o quais s√£o as diferen√ßas que existem entre CommonJS e ESModules.",
            "pathImgModulo": "",
            "categoria": "Fundamentos",
            "duracao": "1h",
            "colors": {
                "main": "#4B9E15",
                "background": "#D4EEC3"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "Caracteristicas e limita√ß√µes comuns do JavaScript",
                        "descricao": "Explore as principais caracter√≠sticas e limita√ß√µes do JavaScript, como sua natureza ass√≠ncrona e o gerenciamento de escopo.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#68EC13",
                        "paragrafos": [
                            {
                                "texto": "As principais do JavaScript no Nodejs s√£o o <i><b>Event Loop</b></i> um modelo non-blocking, permitindo opera√ß√µes concorrentes sem bloquer a thread principal e ideal para aplica√ß√µes simult√¢neas de I/O. <i><b>Single-Threaded</b></i>, o Node.js roda em uma √∫nica thread, mas usa <i><b>Worked Threads</b></i> para tarefas pesadas em CPU e escalabilidade via cluster mode(m√∫ltiplas inst√¢ncias do Node). <i><b>CommonJS</i></b> e <i><b>ESM(M√≥dulos)</b></i> √© suporte a m√≥dulos via <b>require()</b>, <b>Common.JS</b> e <b>import(ES Modules)</b>, depend√™ncia gerenciada pelo npm ou yarn. V8 Engine, executar JavaScript com alta performace e suporte a recursos modenos do <i><b>ECMAScript(ES6+)</b></i>. <i><b>Streams</i></b> e <i><b>Buffers</b></i>, otimiza para manipula√ß√£o de dados em fluxo(streams) e opera√ß√µes com buffers.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "As limita√ß√µes principais s√£o <i>Single-Threaded</i></b> problemas com <i><b>CPU-Intensive Task</i></b>, c√≥digo bloqueante com os loops pesados e pode trava o <b>Event Loop</b>, solu√ß√µes <b>Worker Threads</b>, delegar tarefa a outros servi√ßos. <b>Callback Hell</b>, aninhamento excessivo de callbacks antes de <i><b>promises/async-await</b></i>, solu√ß√£o e usar um async/await ou bibliotecas como Promise.all. Gerenciamento de mem√≥ria, vazamento de mem√≥ria podem ocorrer se n√£o forem liberadas refer√™ncias. Depend√™ncia Externas(NPM), o ecossistema tem milh√µes de pacotes, mas alguns podem ter m√° qualidade ou vulnerabilidade, problemas com dependency hell(vers√µes conflitante). Falta de suporte a <i><b>Multi-threading</i></b> Nativo, Embora existam <b>Worker Threads</b>, n√£o √© t√£o simples quanto em linguagens como Java ou Go. Processamento de Dados Bin√°rios, Embora o Node.js tenha <b>Buffer</b>, manipula√ß√£o avan√ßada de bin√°rios pode ser menos eficiente que em C/C++. Mudan√ßas r√°pidas na api, algumas api do node.js mudam entre vers√µes, exigindo atualiza√ß√µes frequentes. Seguran√ßa, vulnerabilidade em pacotes de terceiros( npm audit √© essencial), configura√ß√µes incorretas podem expor dados sens√≠veis em produ√ß√£o.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Principais conceitos do JavaScript",
                        "descricao": "Compreenda conceitos chave do JavaScript, como vari√°veis, fun√ß√µes, objetos, arrays e a manipula√ß√£o do DOM.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "A linguagem JavaScript √© excepcional, pois ao mesmo tempo que √© extremamento complexas, a mesmo consegue ser muito intuitiva e f√°cil de compreender suas nuncias. Aqui vamos ver seus conceitos principais. Os tipos de dados e vari√°veis temos o <b><i>var</i></b>, <b><i>let</i></b> e <b><i>const</i></b> esses s√£o padr√µes para declara√ß√µes. Os primitivos s√£o exempladamente <i><b>string</b></i>, <i><b>number</b></i>, <i><b>boolean</b></i>, <i><b>null</b></i>, <i><b>undefined</b></i>, <i><b>symbol</b></i>, <i><b>bigint</b></i>. Os Objetos s√£o ditos como <i><b>object</b></i> e <i><b>array []</i></b>.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Para opera√ß√µes temos s√≠mbolos para indicar a cada sua fun√ß√µes, <b>somar +</b>, <b>subtrair -</b>, <b>multiplicar *</b>, <b>dividir /</b>, obter o restos da <b>divis√£o %</b>. Para obter o resultado de uma compara√ß√£o, o mesmo sera em uma resposta boolean como verdadeiro/falso, <b>verificar se √© igual o valor (==)</b>, <b>verificar se √© igual o valor e tipo (===)</b>, <b>verificar que √© diferente o valor (!=)</b>, <b>verifica que √© diferente o valor e tipo (!==)</b>, <b>verificar que √© maior (>) ou menor (<)</b>.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Os operadores l√≥gicos ajudam muito na formaliza√ß√£o da senten√ßa da opera√ß√£o, em javascript temos tr√™s. O <b>se e somente se (&&)</b> ex: ((5 + 3 == 8) && (3 + 5 == 8) ) == verdadeiro. <b>O se esse ou esse (||)</b> ex: ((4%2 == 0) || (3%2 == 0)) == verdadeiro, para avaliar a nega√ß√£o de uma senten√ßa s√≥ preciso usar o <b>simbolo (!)</b> ex: !(2 + 3 == 6) == verdadeiro.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "As atribui√ß√µes come√ßa pelo <b>s√≠mbolo (=)</b> ex: A = 5 o vari√°vel oberar o valor 5 em sua composi√ß√£o. O <b>simbolo (+=)</b> ex: A += 5 o valor 5 somara com o valor que est√° dentro da vari√°vel. O <b>simbolo (-=)</b> ex: A -= 5 o valor subtrair√° o valor que est√° dentro da vari√°vel.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Diante as estruturas de controle, s√£o todas as padr√µes de qualquer linguagem. Temos o <b>if...else = se...sen√£o</b>, <b>switch == cole√ß√£o de probabilidade</b>. Os loops temos o <b>for == parar em alguma estancia</b>, <b>while == enquanto algo operacional estiver acontecendo</b>, <b>do...while == fazer enquanto algo estiver acontecendo</b>, <b>for...of == √© loop que permite iterar sobre elementos</b>, <b>for...in == j√° √© um loop usado parar iterar sobre propriedades enumer√°veis de um objetos</b>.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Temos 4 tipos de fun√ß√µes. A declara√ß√£o <b>function nomeFun√ß√£o(){}</b>. Express√£o <b>const funcao = function(){}</b>. Arrow functions <b>() => {}</b>. E o par√¢metros e retorno (<b>return</b>). O retorno √© o valor que a fun√ß√£o devolve ap√≥s sua execu√ß√£o, e o par√¢metro √© o valor que a fun√ß√£o recebe como entrada. Exemplo: function soma(a, b) { return a + b; } onde a e b s√£o os par√¢metros e o resultado da soma √© o retorno da fun√ß√£o.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Os principais objetos e prot√≥tipos s√£o a cole√ß√£o de propriedade ({ chave: valor }), heran√ßa baseada em prot√≥tipos e n√£o em classe tradicionas.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "No javaScript os m√©todos s√£o diversos. O <b>push()</b> √© usado para adicionar um o mais elementos ao final de um array e retornar o novo comprimento do array. O <b>pop()</b> remove o √∫ltimo elemento de um array e retornar esse elemento, modifica o array original e se tiver vazio retorna <i>undefined</i>. O m√©todo <b>shift()</b> remove o primeiro elemento de um array e retorna esse elemento. Modificando o array original e deslocando todos os outros elementos para um √≠ndice menor. O m√©todo <b>unshift()</b> adiciona um ou mais elementos no in√≠cio de um array e retorna o novo comprimento do array, deslocando os elementos existentes para √≠ndices maiores. O m√©todo map() √© uma fun√ß√£o de arrays em javaScript que cria um novo array com os resultados da aplica√ß√£o de cada elemento do array original. J√° o m√©todo <b>filter()</b> cria um novo array com todos os elementos que passam em uma implementa√ß√£o fornecida pela fun√ß√£o. √â extremamente √∫lti para selecionar elementos de array baseado em condi√ß√µes espec√≠ficas. O m√©todo <b>reduce()</b> √© umas das opera√ß√µes para manipula√ß√£o de arrays em JavaScript, executa uma fun√ß√£o redutora para cada elemento do array resultando em um √∫nico valor de retorno. J√° o <b>forEach()</b> √© uma fun√ß√£o fornecida uma vez para cada elemento de um array, em ordem crescente de √≠ndice, sendo muito diferente de map() ou filter(), o forEach n√£o retorna um novo array o fundamento dele √© usado para sanar efeitos colaterais.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "No <i><b>√¢mbito de vari√°vel</i></b> de escopo √© algo bem simples, temos a global (<b>var</b>) e a de bloco (<b>let e const</b>) que fica retida na (<b>{}</b>) da fun√ß√£o em afim.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "J√° no <i><b>Eventos e Dom(Document Object Model)</b></i>, temos os elementos <b>document.querySelector()</b> aqui pode se buscar uma classe ou Id do m√©todo em quest√£o, no <b>getElementById()</b> aqui se busca s√≥ o ID. Na manipula√ß√£o temos o <b>innerHTML</b> para manipular <i><b>TAGS</b></i>. No <b>textContent</b> √© um elemento que permite ler ou definir o conte√∫do textual de um elemento HTML excluindo tegs e coment√°rios. Em ultimo dos Eventos  Dom temos <b>addEventListener()</b> esse m√©todo permite colocar um ouvinte nos eventos ao um elemento HTML especifico, assim ocorrendo um clique, tecla pressionada ou movimenta√ß√£o do mouse, assim adiante.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "J√° no √¢mbito <i><b>Assincronismo</b></i> √© um conceito que permite a execu√ß√£o de opera√ß√µes demoradas sem bloquear a thread principal, temos em primeiro lugar os <b>Callbacks</b> que √© nada mais que fun√ß√µes passadas como argumentos para serem executadas depois. <b>Promises</b> √© um objeto que representa a eventual conclus√£o ou falha de uma opera√ß√£o ass√≠ncrona, temos a <i>.then()</i> √© um m√©todo de Promises usado para lidar com o resultado bem-sucedido de uma opera√ß√£o ass√≠ncrona, tamb√©m permite encadear opera√ß√µes na forma limpa e leg√≠vel. Outra √© o <i>.catch()</i> um m√©todo essencial para tratar erros em promises no JavaScript, ele procura e capta falhas no c√≥digos dentro de uma Promise ou .then() anterior no encadeamento. J√° em ultimo nas Promises <i>Async/Await</i> √© uma forma mais modernar, atual e leg√≠vel de trabalhar com opera√ß√µes ass√≠ncronas em JavaScript, assim permitindo escrever c√≥digos de maneira s√≠ncrona, facilitando o entendimento e a manuten√ß√£o do mesmo. Em ultimo dos Assincronismo temos o <b>Fetch API</b> √© a forma mais moderna de fazer requisi√ß√µes HTTP em JavaScript, substituindo o antigo <i>XMLHttpRequest</i>, ela fornece uma interface mais poderosa e flex√≠vel para buscar recursos de forma ass√≠ncrona, retornando promises nativas.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "O <i><b>tratamento de erros</b></i> no c√≥digos √© constituindo pelo <b>try/catch</b> √© uma estrutura fundamental em JavaScript para capturar e tratar erros de formar controlada, assim evitando quebras inesperadas que interrompam o fluxo do c√≥digo. E tamb√©m √© constituindo pelo <b>finally</b> um bloco em uma parte estrutural do try/catch que sempre √© executado independente  de ocorrer um erro ou n√£o.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "No JavaScript temos a <i><b>Classes(ES6+)</b></i> que obt√©m a sintaxe <b>class</b> que √© a forma mais clara e orientada ao objeto para criar estruturas reutiliz√°veis com uma sintaxe limpa e recursos avan√ßados. Temos tamb√©m o <b>constructor</b> um m√©todo em classes que automaticamente quando o objeto √© criado o mesmo √© executado a partir da classes. J√° no conceito de heran√ßa temos o <b>extends</b> que permite criar uma classe filha em uma classe pai, herdando seus m√©todos e propriedade.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Em <i><b>M√≥dulos (ES6)</b></i> temos duas modulariza√ß√µes, o <b>import  e export</b>  √© uma forma moderna de compartilhar e organizar arquivos JavaScript, esse sistema do ES6 surgiu para substituir os antigos sistema como CommonJS e AMD",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "O <i><b>Hoisting</b></i> em JavaScript √© um comportamento tipico onde a declara√ß√£o de vari√°veis e fun√ß√µes s√£o movidas para o topo de seu escopo antes da execu√ß√£o do c√≥digo.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "O <i><b>Closures</b></i> s√£o um dos conceitos mais poderosos e at√© importante, eles permitem que a fun√ß√µes ‚Äúlembrem‚Äù e acessem vari√°veis de seu escopo l√©xico, mesmo depois  a execu√ß√£o da fun√ß√£o externa ter sido finalizada.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "O <i><b>Destructuring</b></i> √© uma sintaxe no ES6 que extrair valores de arrays ou objetos de forma mais leg√≠vel.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "O <i><b>Spread/Rest Operator</b></i> √© nada menos que <b>(...)</b> serve para espalhar ou agrupar elementos. O <b>Spread</b> √© usado para expandir elementos de um array ou objeto, enquanto o <b>Rest</b> √© usado para agrupar m√∫ltiplos argumentos em um √∫nico array.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Agora o <i><b>Template Literals</b></i> o template strings √© somente uma √°rea de adicionamento de express√£o vari√°vel, representado dessa forma <b>(${})</b>. S√£o uma sintaxe introduzida no ES6 que cria de forma flex√≠vel e poderosa, pode ser usando <b>(``)</b> tamb√©m.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "E tamb√©m temos o <i><b>JSON(JavaScript Object Notation)</b></i> composto de <b>JSON.parse()</b> e junto com <b>JSON.stringify()</b>. O m√©todo <i>JSON.parse()</i> √© usado para converter uma string JSON v√°lida em um objeto JavaScript. J√° o m√©todo <i>JSON.stringify()</i> converter um objeto JavaScript em uma string JSON, criando assim uma lista seriada de dados para compartilhamento e armazenamento.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "No <i><b>Web APIs</b></i> fornece interfaces pelos navegadores que permite e cria intera√ß√£o com recursos do sistema e funcionalidades avan√ßadas, com capacidades espec√≠ficas para desenvolvimento web. Os principais s√£o <b>localStorage</b>, <b>sessionStorage</b>, <b>setTimeout</b> e <b>setInterval</b>. No <i>localStorege</i> permite armazenar dados no navegador do usu√°rio, como se fosse um cookies, s√≥ que n√£o expiram at√© ser diretamente removidos, tem maior capacidade at√© mais de 5MB e n√£o s√£o enviados automaticamente em requisi√ß√µes. J√° no <i>sessionStorage</i> e umas da forma de armazenar dados temporariamente para sess√£o atual da aba  do navegador e quando fecha a aba os dados se apagam automaticamente, e l√≥gico cada aba tem seu pr√≥prio sessionStorage. E no <i>setTimeout</i> √© uma fun√ß√£o para executar uma a√ß√£o em um tempo exato contabilizado em <b>milissegundos</b>. Em ultimo o <i>setInterval</i> √© um pouco diferente do <b>setTimeout</b> esse executa repetidamente em um intervalo de tempo definido.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "Em ultimo t√≥pico <i><b>Strict Mode</b></i> ele √© fundamental para tornar o c√≥digo JavaScript mais seguro, evitando assim m√°s pr√°ticas. O c√≥digo em si √© <b>(use strict)</b> o mesmo √© rigoroso e evitar erros e deixa limpo o executar do c√≥digo em si.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "<i><b>Saber JavaScript √© fundamental, pois √© a linguagem base do Node, sem o conhecimento  √© envi√°vel o uso do mesmo. Assim recomendo apender pelo menos o b√°sico de JavaScript puro front-end para come√ßar ter as primeiras experiencias no back-end atrav√©s do NodeJS.</b></i>.",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Diferen√ßas entre CommonJS e ESModules",
                        "descricao": "Aprenda as diferen√ßas entre os sistemas de m√≥dulos CommonJS e ESModules, e como cada um √© usado no Node.js.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        },
        {
            "titulo": "üìÇ Manipula√ß√£o de Arquivos e M√≥dulos",
            "descricao": "Explore o sistema de m√≥dulos do Node.js, aprenda a criar e importar m√≥dulos pr√≥prios e manipule arquivos utilizando o m√≥dulo fs para leitura e escrita.",
            "pathImgModulo": "",
            "categoria": "Arquivos",
            "duracao": "1h",
            "colors": {
                "main": "#9D5816",
                "background": "#EBD4BE"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "Conceito de M√≥dulos do Node.js",
                        "descricao": "Entenda o conceito de m√≥dulos no Node.js e como eles permitem a organiza√ß√£o e reutiliza√ß√£o de c√≥digo.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#F28318",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Depend√™ncias",
                        "descricao": "Aprenda como gerenciar depend√™ncias externas em seu projeto e utiliz√°-las atrav√©s de m√≥dulos no Node.js.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Criar, exportar e importar m√≥dulos pr√≥prios",
                        "descricao": "Veja como criar seus pr√≥prios m√≥dulos, exportar funcionalidades e import√°-las em outros arquivos.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Manipula√ß√£o de arquivos utilizando o m√≥dulo fs para leitura e escrita",
                        "descricao": "Aprenda a utilizar o m√≥dulo fs do Node.js para ler e escrever arquivos de forma s√≠ncrona e ass√≠ncrona.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#68EC13",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        },
        {
            "titulo": "üåê Criando um Servidor Web com Express.js",
            "descricao": "Desenvolva um servidor web com Express.js, aprenda a definir rotas para diferentes m√©todos HTTP e utilize middlewares para processar requisi√ß√µes.",
            "pathImgModulo": "",
            "categoria": "Express.js",
            "duracao": "1h",
            "colors": {
                "main": "#49148B",
                "background": "#D2BEEB"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "Introdu√ß√£o ao Express.js",
                        "descricao": "Conhe√ßa o Express.js, um framework para Node.js, que facilita a cria√ß√£o de servidores e APIs com recursos poderosos e simplificados.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#7515ED",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Desenvolva um servidor web com Express.js",
                        "descricao": "Aprenda a criar um servidor web b√°sico utilizando o Express.js, configurando rotas e respondendo a requisi√ß√µes HTTP.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Conceitos de defini√ß√µes de rota",
                        "descricao": "Entenda o conceito de rotas no Express.js, como defini-las e manipul√°-las para responder a diferentes tipos de requisi√ß√µes.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        },
        {
            "titulo": "üîß Trabalhando com Banco de Dados",
            "descricao": "Conecte sua aplica√ß√£o a bancos de dados MySQL ou Firebase, aprenda a realizar consultas e opera√ß√µes b√°sicas para armazenar e recuperar informa√ß√µes.",
            "pathImgModulo": "",
            "categoria": "Banco de Dados",
            "duracao": "1h",
            "colors": {
                "main": "#14538A",
                "background": "#9DBFDD"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "Conceitos b√°sicos do banco de dados SQL",
                        "descricao": "Aprenda o que √© Banco de Dados e alguns dos conceitos fundamentais de bancos de dados relacionais SQL, como tabelas, chaves prim√°rias e SQL queries.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1ABBE8",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Conecte sua aplica√ß√£o ao banco de dados MySQL",
                        "descricao": "Veja como conectar seu projeto Node.js a um banco de dados MySQL e realizar opera√ß√µes b√°sicas de leitura e escrita.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Conceitos b√°sicos do banco de dados NoSQL",
                        "descricao": "Entenda os princ√≠pios dos bancos de dados NoSQL, como a flexibilidade e escalabilidade, e como eles se diferenciam dos SQL.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Primeiros passos com Firebase",
                        "descricao": "Explore o Firebase, sua configura√ß√£o e como ele pode ser usado para armazenar dados em tempo real no seu projeto.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#68EC13",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Conecte sua aplica√ß√£o ao banco de dados Firebase",
                        "descricao": "Aprenda a integrar seu aplicativo Node.js com o Firebase para criar e ler dados de forma eficiente.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#F28318",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        },
        {
            "titulo": "üîÑ APIs RESTful com Node.js",
            "descricao": "Estruture uma API RESTful completa com Express.js, implemente um CRUD funcional e aprenda a enviar e receber dados em formato JSON.",
            "pathImgModulo": "",
            "categoria": "APIs",
            "duracao": "1h",
            "colors": {
                "main": "#870F36",
                "background": "#E1B6C4"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "Conceitos de API",
                        "descricao": "Entenda o que s√£o APIs, sua import√¢ncia e como elas permitem a comunica√ß√£o entre diferentes sistemas e aplicativos.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#EA1A5E",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "O que s√£o APIs RESTful",
                        "descricao": "Aprenda sobre APIs RESTful, seus princ√≠pios e como elas utilizam m√©todos HTTP para operar em recursos de maneira eficiente.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Estrutura√ß√£o de uma API RESTful com Express.js",
                        "descricao": "Descubra como estruturar uma API RESTful com o Express.js, criando rotas e manipulando requisi√ß√µes e respostas.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "O que √© CRUD?",
                        "descricao": "Compreenda o conceito de CRUD (Create, Read, Update, Delete) e sua aplica√ß√£o em sistemas de gerenciamento de dados.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#68EC13",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Implemente um sistema CRUD funcional com Node.js",
                        "descricao": "Aprenda a implementar um sistema CRUD completo usando Node.js, Express.js e um banco de dados para persistir dados.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#F28318",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "O que √© JSON?",
                        "descricao": "Saiba o que √© o JSON (JavaScript Object Notation) e como ele √© usado para troca de dados entre servidor e cliente.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#7515ED",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Enviar e receber dados em formato JSON",
                        "descricao": "Aprenda como enviar e receber dados em formato JSON em uma API, utilizando o Express.js para facilitar a comunica√ß√£o.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1A88E8",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        },
        {
            "titulo": "üéØ Deploy e Boas Pr√°ticas",
            "descricao": "Gerencie vari√°veis de ambiente com dotenv, utilize Git para versionamento do c√≥digo e publique sua aplica√ß√£o na internet usando a plataforma Vercel.",
            "pathImgModulo": "",
            "categoria": "Deploy",
            "duracao": "1h",
            "colors": {
                "main": "#133C7A",
                "background": "#D1D5DB"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "O que s√£o vari√°veis de ambiente",
                        "descricao": "Entenda o conceito de vari√°veis de ambiente, sua import√¢ncia para a configura√ß√£o de aplica√ß√µes e como elas ajudam a manter informa√ß√µes sens√≠veis fora do c√≥digo.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1265E2",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Gerenciamento de vari√°veis de ambiente no Node.js com a biblioteca dotenv",
                        "descricao": "Aprenda a usar a biblioteca dotenv no Node.js para carregar vari√°veis de ambiente de um arquivo .env, mantendo a seguran√ßa e flexibilidade no seu projeto.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "O que √© Git e a import√¢ncia do versionamento de c√≥digo",
                        "descricao": "Compreenda o Git, suas funcionalidades e como o versionamento de c√≥digo ajuda na colabora√ß√£o e controle de mudan√ßas no seu projeto.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Introdu√ß√£o ao GitHub e configura√ß√£o do GitHub no VS Code",
                        "descricao": "Saiba como usar o GitHub para hospedar reposit√≥rios e configurar o Git no VS Code, facilitando o controle de vers√£o e o trabalho em equipe.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#68EC13",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Conceitos de Deployment e como realizar o Deploy de uma aplica√ß√£o Node.js na plataforma Vercel",
                        "descricao": "Entenda o que √© deployment e como realizar o deploy de uma aplica√ß√£o Node.js utilizando a plataforma Vercel para tornar sua aplica√ß√£o acess√≠vel online.",
                        "pathImgSessao": "https://global.discourse-cdn.com/freecodecamp/optimized/4X/b/2/b/b2b29cf1ff8514236fa0ade16aa677e5539a14e8_2_1024x529.png",
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#F28318",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": "",
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": "",
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        }
    ]
}