{
    "tituloCurso": "Introdu√ß√£o ao <svg width=\"2500\" height=\"708\" viewBox=\"0 0 512 145\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\"><g fill=\"#83CD29\"><path d=\"M471.05 51.611c-1.244 0-2.454.257-3.525.863l-33.888 19.57c-2.193 1.264-3.526 3.65-3.526 6.189v39.069c0 2.537 1.333 4.92 3.526 6.187l8.85 5.109c4.3 2.119 5.885 2.086 7.842 2.086 6.366 0 10.001-3.863 10.001-10.576V81.542c0-.545-.472-.935-1.007-.935h-4.245c-.544 0-1.007.39-1.007.935v38.566c0 2.975-3.1 5.968-8.13 3.453l-9.21-5.396c-.326-.177-.576-.49-.576-.863v-39.07c0-.37.247-.747.576-.935L470.547 57.8a.998.998 0 0 1 1.007 0l33.817 19.498c.322.194.576.553.576.936v39.069c0 .373-.188.755-.504.935l-33.889 19.498c-.29.173-.69.173-1.007 0l-8.706-5.18a.905.905 0 0 0-.863 0c-2.403 1.362-2.855 1.52-5.109 2.302-.555.194-1.398.495.288 1.44l11.368 6.69a6.995 6.995 0 0 0 3.526.936 6.949 6.949 0 0 0 3.525-.935l33.889-19.499c2.193-1.275 3.525-3.65 3.525-6.187v-39.07c0-2.538-1.332-4.92-3.525-6.187l-33.889-19.57c-1.062-.607-2.28-.864-3.525-.864z\" /><path d=\"M480.116 79.528c-9.65 0-15.397 4.107-15.397 10.937 0 7.408 5.704 9.444 14.966 10.36 11.08 1.085 11.943 2.712 11.943 4.893 0 3.783-3.016 5.396-10.144 5.396-8.957 0-10.925-2.236-11.584-6.691-.078-.478-.447-.864-.936-.864h-4.389c-.54 0-1.007.466-1.007 1.008 0 5.703 3.102 12.447 17.916 12.447 10.723 0 16.908-4.209 16.908-11.584 0-7.31-4.996-9.273-15.398-10.648-10.51-1.391-11.512-2.072-11.512-4.533 0-2.032.85-4.75 8.634-4.75 6.954 0 9.524 1.5 10.577 6.189.092.44.48.791.935.791h4.39c.27 0 .532-.166.719-.36.184-.207.314-.44.288-.719-.68-8.074-6.064-11.872-16.909-11.872z\" /></g><path d=\"M271.821.383a2.181 2.181 0 0 0-1.08.287 2.18 2.18 0 0 0-1.079 1.871v55.042c0 .54-.251 1.024-.719 1.295a1.501 1.501 0 0 1-1.511 0l-8.994-5.18a4.31 4.31 0 0 0-4.317 0l-35.903 20.721c-1.342.775-2.158 2.264-2.158 3.814v41.443c0 1.548.817 2.966 2.158 3.741l35.903 20.722a4.3 4.3 0 0 0 4.317 0l35.903-20.722a4.308 4.308 0 0 0 2.159-3.741V16.356a4.386 4.386 0 0 0-2.23-3.814L272.9.598c-.335-.187-.707-.22-1.079-.215zM40.861 52.115c-.684.027-1.328.147-1.942.503L3.015 73.34a4.3 4.3 0 0 0-2.158 3.741L.929 132.7c0 .773.399 1.492 1.079 1.87a2.096 2.096 0 0 0 2.159 0l21.297-12.231c1.349-.802 2.23-2.196 2.23-3.742V92.623c0-1.55.815-2.972 2.159-3.742l9.065-5.252a4.251 4.251 0 0 1 2.159-.576c.74 0 1.5.185 2.158.576l9.066 5.252a4.296 4.296 0 0 1 2.159 3.742v25.973c0 1.546.89 2.95 2.23 3.742l21.297 12.232a2.096 2.096 0 0 0 2.159 0 2.164 2.164 0 0 0 1.08-1.871l.07-55.618a4.28 4.28 0 0 0-2.158-3.741L43.235 52.618c-.607-.356-1.253-.475-1.942-.503h-.432zm322.624.503c-.75 0-1.485.19-2.158.576l-35.903 20.722a4.306 4.306 0 0 0-2.159 3.741V119.1c0 1.559.878 2.971 2.23 3.742l35.616 20.29c1.315.75 2.921.807 4.245.07l21.585-12.015c.685-.38 1.148-1.09 1.151-1.87a2.126 2.126 0 0 0-1.079-1.871l-36.119-20.722c-.676-.386-1.151-1.167-1.151-1.943v-12.95c0-.775.48-1.485 1.151-1.871l11.224-6.476a2.155 2.155 0 0 1 2.159 0L375.5 89.96a2.152 2.152 0 0 1 1.08 1.87v10.217a2.15 2.15 0 0 0 1.079 1.87c.673.389 1.487.39 2.158 0L401.331 91.4a4.325 4.325 0 0 0 2.159-3.742v-10c0-1.545-.82-2.966-2.159-3.742l-35.687-20.722a4.279 4.279 0 0 0-2.159-.575zm-107.35 30.939c.188 0 .408.046.576.143l12.304 7.123c.334.193.576.55.576.935v14.246c0 .387-.24.743-.576.936l-12.304 7.123a1.088 1.088 0 0 1-1.079 0l-12.303-7.123c-.335-.194-.576-.549-.576-.936V91.758c0-.386.242-.74.576-.935l12.303-7.122a.948.948 0 0 1 .504-.143v-.001z\" fill=\"#404137\" /><path d=\"M148.714 52.402c-.748 0-1.488.19-2.158.576l-35.903 20.65c-1.343.773-2.159 2.265-2.159 3.813v41.443c0 1.55.817 2.966 2.159 3.742l35.903 20.721a4.297 4.297 0 0 0 4.317 0l35.903-20.721a4.308 4.308 0 0 0 2.158-3.742V77.441c0-1.55-.816-3.04-2.158-3.813l-35.903-20.65a4.297 4.297 0 0 0-2.159-.576zM363.413 89.385c-.143 0-.302 0-.431.072l-6.907 4.029a.84.84 0 0 0-.432.72v7.914c0 .298.172.571.432.72l6.907 3.957c.259.15.535.15.791 0l6.907-3.958a.846.846 0 0 0 .432-.719v-7.915a.846.846 0 0 0-.432-.719l-6.907-4.03c-.128-.075-.216-.07-.36-.07z\" fill=\"#83CD29\" /></svg>, o front-end que virou back-end",
    "descricao": "Neste curso, voc√™ aprender√° o tudo o que precisa para come√ßar a programar em Node.js e tirar suas ideias do papel, com uma did√°tica simples, pr√°tica e eficiente!",
    "modulos": [
        {
            "titulo": "üöÄ Introdu√ß√£o ao Node.Js",
            "descricao": "Entenda o que √© o Node.js, por que ele √© t√£o utilizado e como instal√°-lo corretamente. Configure o npm e execute seu primeiro script no ambiente Node.js.",
            "pathImgModulo": "/assets/webp/CAPA CURSO.webp",
            "categoria": "introdu√ß√£o",
            "duracao": "1h",
            "colors": {
                "main": "#3784D1",
                "background": "#C4DBF2"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "O que √© Node.js?",
                        "descricao": "Descubra o que √© o Node.js, suas principais caracter√≠sticas e por que ele √© amplamente utilizado no desenvolvimento backend.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "Node.js √© um ambiente de execu√ß√£o JavaScript que permite executar c√≥digo JavaScript no lado do servidor, proporcionando uma alternativa altamente eficaz para a constru√ß√£o de servidores de aplica√ß√£o. Criado por Ryan Dahl e lan√ßado em maio de 2009, Node.js utiliza o motor V8 JavaScript da Google e introduz um modelo de programa√ß√£o baseado em um loop de eventos ass√≠ncrono, que permite a execu√ß√£o de opera√ß√µes de entrada e sa√≠da sem bloqueios.",
                                "pathImgInferior":{"path": "/assets/webp/Exemplo/resumo Ryan Dahl.jpg", "description":"Imagem de Ryan Dahl, fonte: <a href='https://www.linkedin.com/pulse/ryan-dahl-nikhil-negi-abg9c/' target='_blank'>https://www.linkedin.com/pulse/ryan-dahl-nikhil-negi-abg9c/</a>"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Ryan Dahl desenvolveu Node.js inspirado pelo processo de carregamento de arquivos no Flickr e observando que servidores como o Apache gerenciavam conex√µes de forma ineficaz. Dahl percebeu a necessidade de um ambiente capaz de gerenciar milhares de conex√µes simult√¢neas sem se tornar bloqueante, e assim nasceu o Node.js.<br/><br/>&#9‚Ä¢ Motor V8 da Google: Node.js utiliza o motor V8, que √© conhecido por sua alta performance na execu√ß√£o de c√≥digo JavaScript.<br/>&nbsp;&nbsp;&nbsp;&nbsp;‚Ä¢ Loop de Eventos Ass√≠ncrono: A principal inova√ß√£o de Node.js √© seu loop de eventos ass√≠ncrono, permitindo que opera√ß√µes de entrada e sa√≠da sejam executadas sem bloqueios.<br/>&#9‚Ä¢ Gerenciamento Eficiente de Conex√µes: Node.js √© capaz de lidar com milhares de conex√µes simult√¢neas de maneira eficiente, tornando-o ideal para aplica√ß√µes em tempo real.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "A popularidade de Node.js cresceu rapidamente ap√≥s seu lan√ßamento, especialmente devido √† sua capacidade de lidar com conex√µes simult√¢neas e ao fato de que os desenvolvedores j√° estavam familiarizados com JavaScript, a linguagem predominante no desenvolvimento web. Node.js √© amplamente utilizado para criar aplica√ß√µes de alta performance, como servidores web, APIs e servi√ßos de streaming. Node.js revolucionou o desenvolvimento de aplica√ß√µes web, oferecendo uma solu√ß√£o poderosa e eficiente para o lado do servidor, e continua a ser uma escolha popular entre desenvolvedores por suas caracter√≠sticas inovadoras e desempenho robusto.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Genealogia da linguagem",
                        "descricao": "Neste m√≥dulo, exploramos as origens da linguagem JavaScript e como ela evoluiu at√© se tornar uma das principais tecnologias da web. Entender essa trajet√≥ria √© essencial para compreender o surgimento do Node.js e seu papel no desenvolvimento moderno.",
                        "pathImgSessao": {"path":"/assets/webp/CAPA GENEALOGIA DA LINGUAGEM.webp", "description": ""},
                        "pathVideoSessao": "",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "Como ja vimos na sess√£o anterior, em 2009, Ryan Dahl criou o Node.js como uma plataforma de tempo de execu√ß√£o JavaScript no lado do servidor. A motiva√ß√£o de Dahl era desenvolver aplica√ß√µes de rede escal√°veis e eficientes, superando as limita√ß√µes de plataformas existentes como o Apache HTTP Server e o Ruby on Rails. A linguagem foi constru√≠do sobre o motor V8 do Google, conhecido por sua velocidade ao compilar JavaScript diretamente em c√≥digo de m√°quina. <br/>O Node.js foi oficialmente introduzido como um ambiente de tempo de execu√ß√£o JavaScript de c√≥digo aberto no lado do servidor em 27 de maio de 2009. Inicialmente, funcionava exclusivamente em sistemas Linux e Mac OS X, mas, ao longo dos anos a linugagem foi evoluindo constantemente para o que temos hoje, e, nesse caminho, podemos destacar alguns eventos e mudan√ßas que toraram o Node.js uma das linguagens mais utilizadas hoje!",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "A evolu√ß√£o do Node.js",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Em 2010, Isaac Schlueter lan√ßou o npm (Node Package Manager), um reposit√≥rio comum para m√≥dulos Node.js que facilita o compartilhamento e a reutiliza√ß√£o de c√≥digo.<br/>Desde ent√£o, o Node.js tem sido adotado por diversas grandes empresas devido √† sua escalabilidade e desempenho. Por exemplo, o Uber foi uma das primeiras empresas a utilizar o Node.js em larga escala, construindo a maior parte de sua plataforma com essa tecnologia. O Node.js oferece processamento r√°pido, uma comunidade open-source ativa e facilidade na detec√ß√£o de erros, permitindo que os desenvolvedores publiquem e implantem novo c√≥digo constantemente.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "Impacto e legado",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "O Node.js revolucionou o desenvolvimento web ao permitir o uso do JavaScript tanto no lado do cliente quanto no servidor. Isso impulsionou o surgimento de frameworks como Express.js e NestJS, al√©m de plataformas como Electron (para aplica√ß√µes desktop) e React Native (para aplica√ß√µes m√≥veis). Grandes empresas como Netflix, LinkedIn, Uber, PayPal, NASA e Walmart adotaram o Node.js em suas opera√ß√µes devido √† sua efici√™ncia e escalabilidade.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "Linha do Tempo",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "<div class='tableContainer'><table><thead><tr><th>Ano<th>Evento<th>Resumo<tbody><tr><td>2009<td>Cria√ß√£o do Node.js<td>Ryan Dahl lan√ßa o Node.js permitindo que o JavaScript fosse executado no lado do servidor<tr><td>2010<td>Lan√ßamento do NPM<td>Isaac Schlueter lan√ßa o npm (Node Package Manager), facilitando o gerenciamento de pacotes do Node.js.<tr><td>2011<td>Suporte ao Windows<td>A Microsoft e a Joynet implementaram uma vers√£o nativa do Node.js para Windows<tr><td>2012<td>Transi√ß√£o de lideran√ßa<td>Ryan Dahl transfere a lideran√ßa do projeto para Isaac Schlueter, criador do npm<tr><td>2014<td>Cria√ß√£o do io.js<td>Desenvolvedores criam o io.js, um fork do Node.js, buscando um desenvolvimento mais √°gil e aberto<tr><td>2015<td>Funda√ß√£o do Node.js<td>A Node.js Foundation √© estabelecida para unificar o Node.js e o io.js, promovendo uma governan√ßa aberta<tr><td>2018<td>Node.js 10 LTS<td>Lan√ßamento da vers√£o 10 do Node.js com Long Term Support, o que oferece uma estabilidade para aplica√ß√µes em produ√ß√£o<tr><td>2021<td>Suporte ao Apple Silicon<td>Node.js 16 √© lan√ßado com suporte aprimorado para os chips M1 da Apple<tr><td>2023<td>Fim do suporte ao Node.js 16<td>O suporte ao Node.js 16 foi encerrado, coincidindo com o fim do suporte do OpenSSL 1.1.1<tr><td>2024<td>Lan√ßamento da vers√£o 20 do Node.js<td>A vers√£o 20 do Node.js √© lan√ßada com suporte de longo prazo, contendo melhorias de desempenho e seguran√ßa</table></div>",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "Evolu√ß√£o do Node.js: Principais Vers√µes e Conquistas",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Desde sua cria√ß√£o em 2009 por Ryan Dahl, o Node.js tem passado por uma evolu√ß√£o constante, impulsionada por melhorias de desempenho, seguran√ßa, compatibilidade com os padr√µes ECMAScript e amplia√ß√£o de recursos voltados √† produ√ß√£o. Abaixo, listamos as vers√µes mais marcantes e os eventos que simbolizam os saltos tecnol√≥gicos da plataforma:",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "<b>&#9‚Ä¢ Vers√£o 0.10.0 (2013) - Introdu√ß√£o dos Streams Melhorados:</b><br/>Esta vers√£o introduziu a nova API de streams (streams2), que trouxe uma forma mais eficiente e controlada de lidar com opera√ß√µes de entrada e sa√≠da (I/O), fundamentais para aplica√ß√µes em rede. Tamb√©m houve melhorias no m√≥dulo domains, para captura de erros ass√≠ncronos.<br/><br/><b>&#9‚Ä¢ Vers√£o 4.0.0 (2015) - Reunifica√ß√£o com io.js e ES6:</b><br/>Ap√≥s a divis√£o da comunidade e a cria√ß√£o do io.js, esta vers√£o marcou o retorno da unifica√ß√£o entre os projetos. Com isso, passou a oferecer suporte mais robusto ao ECMAScript 6, incluindo classes, arrow functions, let/const, entre outros.<br/><br/><b>&#9‚Ä¢ Vers√£o 6.0.0 (2016) - Promises e Seguran√ßa Aprimorada:</b><br/>Com foco em performance e seguran√ßa, o Node.js 6 trouxe melhor suporte para Promises, melhorias na performance do V8 e avan√ßos na seguran√ßa da plataforma. Esta vers√£o consolidou o uso moderno de JavaScript ass√≠ncrono.<br/><br/><b>&#9‚Ä¢ Vers√£o 8.0.0 (2017) - Async/Await no Core:</b><br/>Finalmente foi introduzido suporte completo a async/await, simplificando o desenvolvimento ass√≠ncrono e tornando o c√≥digo mais limpo e compreens√≠vel. Tamb√©m houve a introdu√ß√£o da API util.promisify.<br/><br/><b>&#9‚Ä¢ Vers√£o 10.0.0 (2018) - Sistema de Arquivos e Estabilidade:</b><br/>Al√©m de melhorias de estabilidade, esta vers√£o apresentou uma nova API experimental para o sistema de arquivos (fs.promises), baseada em Promises. Ela foi um passo importante para a padroniza√ß√£o do estilo ass√≠ncrono moderno.<br/><br/><b>&#9‚Ä¢ Vers√£o 12.0.0 (2019) - Privacidade e Diagn√≥stico:</b><br/>Essa vers√£o introduziu private class fields (campos privados de classes do ECMAScript), al√©m de melhorias em diagn√≥stico, como o Diagnostic Report (para an√°lise de falhas em produ√ß√£o).<br/><br/><b>&#9‚Ä¢ Vers√£o 14.0.0 (2020) - M√≥dulos ES e Performance:</b><br/>O destaque foi o suporte experimental a ECMAScript Modules (ESM) com import/export nativos, al√©m de melhorias no motor V8 e novos recursos de diagn√≥stico com rastreamento de chamadas ass√≠ncronas (async stack traces).",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Os paradigmas do Node.js",
                        "descricao": "Aqui veremos os paradigmas do Node.js, incluindo a programa√ß√£o ass√≠ncrona e orientada a eventos e objetos, a programa√ß√£o funcional e a modulariza√ß√£o. Esses conceitos s√£o essenciais para criar aplica√ß√µes escal√°veis e eficientes.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://youtu.be/ET59Wd4gP2E",
                        "highlightColor": "#1265E2",
                        "paragrafos": [
                            {
                                "texto": "Um paradigma de programa√ß√£o √© uma abordagem ou estilo fundamental que orienta a forma como solu√ß√µes s√£o desenvolvidas em linguagens de programa√ß√£o. Ele define a estrutura e os elementos que comp√µem um programa, bem como as intera√ß√µes entre eles. Os principais paradigmas incluem:<br/><ol>&#9<li><b>Paradigma Imperativo:</b> Baseia-se na descri√ß√£o de uma sequ√™ncia de instru√ß√µes que alteram o estado do programa at√© alcan√ßar o resultado desejado, focando em descrever &quot;como&quot; um programa deve realizar tarefas atrav√©s de sequ√™ncias de comandos que alteram o estado do sistema. Linguagens como C e Pascal seguem esse paradigma.<br/><br/><b>Caracter√≠sticas:</b><br/>O paradigma Imperativo possui algumas caracter√≠sticas que podem ser definidas como sendo: <br/>&#9‚Ä¢ A <b>√™nfase em &quot;como&quot; realizar as opera√ß√µes</b>;<br/>&#9‚Ä¢ O <b>uso de vari√°veis que armazenam o estado do programa</b>;<br/>&#9‚Ä¢ O <b>controle explicito do fluxo de execu√ß√£o atrav√©s de estruturas como loops e condicionais.</b><br/><br/>Abaixo temos um exemplo em que o c√≥digo instrui explicitamente o computador a somar os n√∫meros de 1 a 5, atualizando o valor de <code>let contador</code></i></b> a cada itera√ß√£o.</li></ol>",
                                "pathImgInferior": {"path":"/assets/webp/Exemplo/exemplo paradigma imperativo.webp", "description":""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "<ol start='2'><li><b>Paradigma Procedural:</b> √â como se fosse uma extens√£o do paradigma imperativo que organiza o c√≥digo em procedimentos ou fun√ß√µes, isso permite que o c√≥digo se torne mais reutiliz√°vel e mais modular, melhorando o processo de desenvolvimento, escrita e leitura e facilitando a manuten√ß√£o do c√≥digo posteriormente.</li></ol>",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "<b>Caracter√≠sticas:</b><br/>Para este paradigma temos as seguintes caracter√≠sticas:<br/>&#9‚Ä¢ <b>Divis√£o do programa em sub-rotinas ou fun√ß√µes</b>;<br/>&#9‚Ä¢ <b>Melhoria da manuten√ß√£o e leitura do c√≥digo</b>;<br/>&#9‚Ä¢ <b>A otimiza√ß√£o do fluxo de trabalho.</b>",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Abaixo, temos um exemplo que mostra como isso funciona, temos uma fun√ß√£o <code>somar</code></i></b> que encapsula a opera√ß√£o de adi√ß√£o, possibilitando a reutiliza√ß√£o da fun√ß√£o infinitas vezes no c√≥digo, fun√ß√£o essa que ir√° retornar o resultado da soma dos par√¢metros <code>a</code></i></b> e <code>b</code></i></b>, isso √© extremamente positivo pois j√° retorna o n√∫mero diretamente no final, por isso que ao usarmos o <code>console.log(resultado)</code></i></b> a sa√≠da que o c√≥digo nos retornar√° √© o pr√≥prio n√∫mero",
                                "pathImgInferior": {"path":"/assets/webp/Exemplo/exemplo paradigma procedural.webp", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "<ol start='3'>&#9<li><b>Programa√ß√£o Orientada a Objetos (POO): </b> Organiza o c√≥digo em torno de &quot;objetos&quot; que encapsulam dados e comportamentos. Linguagens como Java, C++ e Python adotam esse paradigma. A utiliza√ß√£o do paradigma da Programa√ß√£o Orientada a Objetos (POO) no Node.js melhora a organiza√ß√£o, reutiliza√ß√£o e seguran√ßa do c√≥digo, tornando-o mais modular, escal√°vel e f√°cil de manter. Com conceitos como heran√ßa, encapsulamento e polimorfismo, a POO permite criar sistemas mais estruturados e flex√≠veis.</li></ol>",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "<b>Caracter√≠sticas:</b><br/>Podemos destacar as seguintes caracter√≠sticas do POO no Node.js:<br/>&#9‚Ä¢ <b>Encapsulamento:</b> prote√ß√£o dos dados internos do objeto;<br/>&#9‚Ä¢ <b>Heran√ßa:</b> capacidade de criar classes baseadas (herdadas) em classes existentes;<br/>&#9‚Ä¢ <b>Polimorfismo:</b> permite que diferentes objetos respondam de maneira espec√≠fica a uma mesma mensagem ou m√©todo.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Abaixo temos um exemplo dessa vez sobre o POO sendo aplicado no Node.js, aqui, temos a classe <code>Animal</code></i></b> que tem suas caracter√≠sticas gen√©ricas e seu construtor, o construtor em POO, √© um m√©todo &quot;padr√£o&quot; necess√°rio para que as propriedades (par√¢metros) do objeto sejam inicializadas, imagine aqui as caracter√≠sticas gerais de todo(ou do grupo que esteja definindo) animal faz, neste caso, estamos considerando que todo animal faz um som, portanto, definimos aqui o m√©todo <code>emitirSom()</code></i></b>, que indica ao usu√°rio que o animal esta fazendo um som. Mais abaixo, na linha 9, temos outra classe que est√° &quot;estendendo&quot; da classe gen√©rica <code>Animal</code></i></b>, isso indica que a classe que foi estendida, herdar√° todas as caracter√≠sticas gen√©ricas definidas na classe <code>Animal</code></i></b>, nesse caso, criamos a classe Cachorro, que estende (herdando suas caracter√≠sticas) da classe <code>Animal</code></i></b>, mas, sabemos que o cachorro late, ent√£o, realizamos um o que chamamos de overriding, estamos sobrescrevendo o m√©todo original <code>emitirSom()</code></i></b>, para especificar que, para este animal no caso o cachorro, quando chamarmos o m√©todo <code>emitirSom()</code></i></b>, possamos retornar que o cachorro esta latindo. Nas linhas 14 e 15 estamos criando o que chamamos de Inst√¢ncias das classes criadas, podemos criar quantas inst√¢ncias quisermos, e atribuir a elas os par√¢metros definidos no construtor, nesse caso o nome do animal, e, por fim, nas linhas 16 e 17 estamos &quot;invocando&quot;, o m√©todo <code>emitirSom()</code></i></b> definido nas classes, no caso estamos falando &quot;animal x emita um som&quot;, e o c√≥digo ir√° nos retornar o que pedimos:",
                                "pathImgInferior": {"path":"/assets/webp/Exemplo/exemplo paradigma POO.webp", "description":""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "<ol start='4'>&#9<li><b>Programa√ß√£o Funcional:</b> A programa√ß√£o funcional √© um paradigma que trata a computa√ß√£o como a avalia√ß√£o de fun√ß√µes matem√°ticas, evitando mudan√ßas de estado e dados mut√°veis. Diferentemente da programa√ß√£o imperativa, que se baseia em comandos sequenciais que alteram o estado do programa, a programa√ß√£o funcional descreve o que deve ser alcan√ßado por meio de fun√ß√µes.</li></ol>",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "<b>Caracter√≠sticas:</b><br/>Este paradigma aplicado no Node.js a programa√ß√£o funcional pode ser empregada das seguintes maneiras:<br/>&#9‚Ä¢ <b>Uso de Fun√ß√µes de Alta Ordem:</b> Fun√ß√µes como <code>map</code>, <code>filter</code> e <code>reduce</code> permitem manipular cole√ß√µes de dados de forma declarativa, promovendo um c√≥digo mais conciso e leg√≠vel;<br/>&#9‚Ä¢ <b>Imutabilidade:</b> Embora o JavaScript n√£o imponha imutabilidade por padr√£o, √© poss√≠vel utilizar bibliotecas como Immutable.js para garantir que os dados n√£o sejam alterados ap√≥s a cria√ß√£o, isso permitir√° que os dados, uma vez criados, n√£o s√£o alterados. Em vez disso, novas vers√µes dos dados s√£o geradas quando necess√°rio, o que ajuda a prevenir erros comuns relacionados a altera√ß√µes inesperadas de estado;<br/>&#9‚Ä¢ <b>Fun√ß√µes puras:</b> Escrever fun√ß√µes puras e combin√°-las facilita a cria√ß√£o de aplica√ß√µes modulares e test√°veis no Node.js.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Aqui, temos o exemplo que mostra o paradigma funcional sendo aplicado no Node.js. Aqui, temos a fun√ß√£o <code>multiplicarPorDois</code>, que √© um exemplo de fun√ß√£o pura. Em programa√ß√£o funcional, fun√ß√µes puras s√£o aquelas que, dado um mesmo conjunto de entradas, sempre retornam o mesmo resultado, sem modificar estados externos ou causar efeitos colaterais. Essa fun√ß√£o recebe um n√∫mero como argumento e retorna esse n√∫mero multiplicado por dois.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Logo abaixo, temos a fun√ß√£o <code>aplicarOperacao</code>, que exemplifica o conceito de fun√ß√£o de alta ordem. Em programa√ß√£o funcional, uma fun√ß√£o de alta ordem √© aquela que recebe outra fun√ß√£o como argumento ou retorna uma fun√ß√£o. No nosso caso, <code>aplicarOperacao</code> recebe um array e uma fun√ß√£o, aplicando essa fun√ß√£o a cada elemento do array utilizando o m√©todo <code>map()</code>. O m√©todo <code>map()</code> √© uma caracter√≠stica importante da programa√ß√£o funcional, pois permite transformar cole√ß√µes de dados sem modificar a original, garantindo imutabilidade.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Na linha 10, criamos um array de n√∫meros [1, 2, 3, 4, 5]. Em seguida, chamamos <code>aplicarOperacao</code>, passando esse array e a fun√ß√£o <code>multiplicarPorDois</code> como par√¢metros. O resultado √© um novo array onde cada n√∫mero foi multiplicado por dois, sem alterar o array original. Esse conceito de imutabilidade √© fundamental na programa√ß√£o funcional, pois evita efeitos colaterais e facilita a manuten√ß√£o do c√≥digo.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Por fim, exibimos o resultado no console, que nos retorna [2, 4, 6, 8, 10]. Esse exemplo mostra como o paradigma funcional pode ser aplicado no Node.js para escrever c√≥digo modular, previs√≠vel e mais f√°cil de testar.",
                                "pathImgInferior": {"path":"/assets/webp/Exemplo/exemplo paradigma funcional.webp", "description":""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "<ol start='5'>&#9<li><b>Programa√ß√£o Declarativa:</b> A programa√ß√£o declarativa √© um paradigma que se concentra em descrever o que deve ser feito, sem especificar detalhadamente como realizar as opera√ß√µes. Diferentemente da programa√ß√£o imperativa, que define uma sequ√™ncia expl√≠cita de comandos, a abordagem declarativa permite que o desenvolvedor especifique o resultado desejado, delegando ao sistema a responsabilidade de determinar o fluxo de execu√ß√£o necess√°rio para alcan√ß√°-lo.</li></ol>",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "<b>Caracter√≠sticas:</b><br/>Principais Caracter√≠sticas da Programa√ß√£o Declarativa no Node.js:<br/>&#9‚Ä¢ <b>Abstra√ß√£o de Controle:</b> O programador define o objetivo final, e o sistema gerencia os detalhes de implementa√ß√£o para atingir esse resultado;<br/>&#9‚Ä¢ <b>Imutabilidade e Aus√™ncia de Estado:</b> As opera√ß√µes n√£o dependem de estados internos ou vari√°veis mut√°veis, promovendo previsibilidade e facilitando a depura√ß√£o;<br/>&#9‚Ä¢ <b>Transpar√™ncia Referencial: :</b> Fun√ß√µes ou express√µes produzem o mesmo resultado quando dadas as mesmas entradas, sem efeitos colaterais, permitindo substitui√ß√µes seguras e otimizando o c√≥digo;<br/>&#9‚Ä¢ <b>Concis√£o e Clareza:</b> A sintaxe tende a ser mais enxuta e expressiva, focando no &quot;o qu√™&quot; em vez do &quot;como&quot;, o que melhora a legibilidade e manuten√ß√£o do c√≥digo.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "No contexto do Node.js, a programa√ß√£o declarativa √© frequentemente aplicada por meio de t√©cnicas funcionais e uso de APIs que permitem descrever opera√ß√µes de forma declarativa.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Abaixo temos um exemplo dessa vez sobre o paradigma declarativo sendo aplicado no Node.js. Diferente da programa√ß√£o imperativa, onde descrevemos passo a passo como o programa deve executar cada a√ß√£o, na programa√ß√£o declarativa focamos no que queremos alcan√ßar, deixando que a linguagem e suas fun√ß√µes abstratas lidem com os detalhes da execu√ß√£o. No exemplo abaixo, temos um array de n√∫meros e utilizamos fun√ß√µes declarativas como <code>filter()</code>, <code>map()</code> e <code>reduce()</code> para manipular os dados de forma clara e expressiva, sem precisar de la√ßos ou vari√°veis auxiliares.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Primeiramente, criamos um array de n√∫meros de 1 a 10. Em seguida, definimos a fun√ß√£o <code>ehPar</code>, que verifica se um n√∫mero √© par, e a fun√ß√£o <code>aoQuadrado</code>, que eleva um n√∫mero ao quadrado. Ambas s√£o fun√ß√µes puras, pois sempre retornam o mesmo resultado para os mesmos argumentos, sem causar efeitos colaterais.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Na linha 10, aplicamos a cadeia de m√©todos declarativos: primeiro usamos <code>filter(ehPar)</code>, que retorna apenas os n√∫meros pares do array; depois <code>map(aoQuadrado)</code>, que transforma cada n√∫mero par em seu quadrado; e por fim <code>reduce((acc, val) => acc + val, 0)</code>, que soma todos os valores resultantes. Esse encadeamento de fun√ß√µes evita a necessidade de estruturas imperativas, como <code>for</code> ou <code>while</code>, tornando o c√≥digo mais leg√≠vel e conciso.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Ao final, o c√≥digo nos retorna 220, que √© a soma dos quadrados dos n√∫meros pares do array original. Esse exemplo mostra como a programa√ß√£o declarativa torna o c√≥digo mais expressivo e f√°cil de entender, permitindo que o desenvolvedor foque no resultado desejado, sem se preocupar com os detalhes de implementa√ß√£o.",
                                "pathImgInferior": {"path":"/assets/webp/Exemplo/exemplo paradigma declarativo.webp", "description":""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "<ol start='6'>&#9<li><b>Programa√ß√£o Orientada a Eventos:</b> A Programa√ß√£o Orientada a Eventos √© um paradigma no qual o fluxo de execu√ß√£o de um programa √© determinado por eventos, como intera√ß√µes do usu√°rio, mensagens de outros sistemas ou mudan√ßas de estado. No Node.js, esse paradigma √© fundamental, permitindo a constru√ß√£o de aplica√ß√µes ass√≠ncronas e altamente responsivas.</li></ol>",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "<b>Caracter√≠sticas:</b><br/>Principais Caracter√≠sticas da Programa√ß√£o Orientada a Eventos no Node.js:<br/>&#9‚Ä¢ <b>Assincronicidade:</b> As opera√ß√µes s√£o executadas de forma n√£o bloqueante, permitindo que o programa continue processando outras tarefas enquanto aguarda a conclus√£o de opera√ß√µes anteriores;<br/>&#9‚Ä¢ <b>Emiss√£o e Escuta de Eventos:</b> Componentes do sistema podem emitir eventos, enquanto outros &quot;ouvintes&quot; reagem a esses eventos, facilitando a comunica√ß√£o entre diferentes partes da aplica√ß√£o;<br/>&#9‚Ä¢ <b>Loop de Eventos (Event Loop):</b> Mecanismo central do Node.js que gerencia a execu√ß√£o de opera√ß√µes ass√≠ncronas, despachando eventos e garantindo que as fun√ß√µes de callback correspondentes sejam executadas no momento apropriado.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Abaixo, temos um exemplo que demonstra a aplica√ß√£o da Programa√ß√£o Orientada a Eventos no Node.js. Utilizamos o m√≥dulo events para criar um emissor de eventos personalizado que reage a um evento espec√≠fico.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Primeiro, vamos realizar a importa√ß√£o do m√≥dulo <code>events</code>: Utilizamos o m√≥dulo interno do Node.js chamado <code>events</code>, que fornece a classe <code>EventEmitter</code> para a cria√ß√£o e manipula√ß√£o de eventos. Depois temos a cria√ß√£o de uma classe personalizada <code>MeuEmissor</code>, que estende <code>EventEmitter</code>, permitindo que inst√¢ncias dessa classe emitam e escutem eventos personalizados, e, em seguida temos a instancia√ß√£o do Emissor de Eventos, aqui estamos criando uma inst√¢ncia de <code>MeuEmissor</code> chamada <code>meuEmissor</code>, que ser√° utilizada para emitir e ouvir eventos, depois, realizamos o registro de um Ouvinte de Evento, utilizamos o m√©todo <code>on</code> para registrar uma fun√ß√£o que ser√° executada sempre que o evento '<code>eventoPersonalizado</code>' for emitido. Nesse caso, a fun√ß√£o simplesmente imprime uma mensagem no console, por fim temos a emiss√£o do evento personalizado: Chamamos o m√©todo <code>emit</code> para disparar o evento '<code>eventoPersonalizado</code>', acionando todos os ouvintes registrados para esse evento. Como resultado, a mensagem definida anteriormente √© exibida no console.",
                                "pathImgInferior": {"path":"/assets/webp/Exemplo/exemplo paradigma orientada a eventos.webp", "description":""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "<br/>No geral os paradigmas de programa√ß√£o no Node.js s√£o fundamentais para entender como essa tecnologia se destaca no desenvolvimento de aplica√ß√µes modernas. Ele adota principalmente os paradigmas ass√≠ncrono e orientado a eventos, que permitem um alto desempenho em aplica√ß√µes de rede e sistemas escal√°veis. Al√©m disso, suporta a programa√ß√£o funcional com o uso de fun√ß√µes de ordem superior, promessas e async/await, tornando o c√≥digo mais modular e reutiliz√°vel.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Por outro lado, o paradigma orientado a objetos tamb√©m pode ser utilizado, principalmente com classes do ES6, facilitando a organiza√ß√£o de grandes projetos. No entanto, devido √† natureza do JavaScript, a combina√ß√£o de m√∫ltiplos paradigmas dentro do mesmo projeto √© comum e pode ser ben√©fica.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Em conclus√£o, o Node.js oferece uma abordagem flex√≠vel e eficiente para o desenvolvimento de software, permitindo que os desenvolvedores escolham os paradigmas que melhor se adaptam √†s necessidades do projeto. Seu modelo ass√≠ncrono e n√£o bloqueante, aliado √† versatilidade da linguagem, faz dele uma escolha poderosa para aplica√ß√µes escal√°veis e de alto desempenho.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Instala√ß√£o do Node.js",
                        "descricao": "Aprenda a instalar o Node.js no seu sistema operacional, seja ele Linux ou Windows.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA INSTALACAO.webp", "description":""},
                        "pathVideoSessao": "",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "texto": "Aqui veremos o passo a passo de como realizar a instala√ß√£o do Node.js nos sistemas windows e Linux"
                            },
                            {
                                "subtitulo": "Como instalar no windows: ",
                                "pathVideoSuperior": "https://youtu.be/KYfZOGlAP38"
                            },
                            {
                                "subtitulo": "Como instalar no Linux: ",
                                "pathVideoSuperior": "https://youtu.be/ux6hjqaiSBY"
                            }
                        ]
                    },
                    {
                        "titulo": "Conceitos de IDE, instala√ß√£o e configura√ß√£o do VS Code",
                        "descricao": "Aqui voc√™ ir√° descobrir o que √© uma IDE, para que serve, como realizar a instala√ß√£o completa, dicas e configura√ß√£o da IDE do Visual Studio Code.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CONCEITOS DE IDE.webp", "description":""},
                        "pathVideoSessao": "",
                        "highlightColor": "rgb(113 36 197)",
                        "paragrafos": [
                            {
                                "texto": "Uma IDE (<i>Integrated Development Environment</i>, ou Ambiente de Desenvolvimento Integrado) √© uma aplica√ß√£o que re√∫ne ferramentas essenciais para o desenvolvimento de software, como:<ul><li>Editor de c√≥digo com realce de sintaxe e autocompletar;<li>Depurador (debugger) para identificar e corrigir erros;<li>Terminal integrado para execu√ß√£o de comandos;<li>Gerenciador de projetos para organiza√ß√£o de arquivos.</ul>Essas funcionalidades aumentam a produtividade e facilitam o desenvolvimento de aplica√ß√µes e otimizam o tempo de desenvolvimento da aplica√ß√£o.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "Principais IDEs utilizadas hoje em dia por profissionais",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "No cen√°rio atual, diversas ferramentas de desenvolvimento t√™m se destacado, especialmente com o avan√ßo das Intelig√™ncias Artificiais (IAs), que t√™m facilitado a vida dos desenvolvedores, proporcionando uma codifica√ß√£o mais √°gil e eficiente.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Entre as IDEs mais populares no mercado, destacam-se:",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "/assets/webp/logoIDE vscode.webp", "description": "Imagem do <a href='https://code.visualstudio.com/' target='_blank'>Visual Studio Code</a>"},
                                "pathVideoSuperior": "",
                                "texto": "<strong>1. Visual Studio Code (VS Code)</strong>:<br/>O <strong>VS Code</strong>, desenvolvido pela Microsoft, √© uma IDE leve e poderosa e talvez a IDE mais utilizada hoje por desenvolvedores de software em todo o mundo. Suas principais caracter√≠sticas incluem:<ul><li>Suporte a uma ampla variedade de linguagens de programa√ß√£o;<li>Extensibilidade atrav√©s de uma vasta gama de extens√µes, sendo a grande maioria delas gratuita dispon√≠veis na Marketplace;<li>Integra√ß√£o com Git para controle de vers√£o e colabora√ß√£o em equipe;<li>Depura√ß√£o integrada e ferramentas avan√ßadas de edi√ß√£o de c√≥digo.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "/assets/webp/logoIDE IntelliJ idea.webp", "description": "Imagem do <a href='https://www.jetbrains.com/idea/' target='_blank'>IntelliJ Idea</a>"},
                                "pathVideoSuperior": "",
                                "texto": "</ul><strong>2. IntelliJ IDEA</strong>:<br/>Desenvolvido pela JetBrains, √© uma IDE popular entre os desenvolvedores Java e Kotlin. Suas principais vantagens incluem:<ul><li>Integra√ß√£o profunda com frameworks populares, como Spring e Android;<li>Ferramentas avan√ßadas de refatora√ß√£o e an√°lise est√°tica de c√≥digo;<li>Suporte a desenvolvimento web, incluindo HTML, CSS, JavaScript e frameworks como Angular e React.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "/assets/webp/logoIDE eclipse.webp", "description": "Imagem do <a href='https://eclipseide.org/' target='_blank'>Eclipse</a>"},
                                "pathVideoSuperior": "",
                                "texto": "</ul><strong>3. Eclipse</strong>:<br/>O <strong>Eclipse</strong> √© uma IDE de c√≥digo aberto amplamente utilizada, especialmente na comunidade Java. Algumas de suas caracter√≠sticas incluem:<ul><li>Ecossistema de plugins extens√≠vel que oferece suporte a uma variedade de linguagens e tecnologias;<li>Ferramentas de desenvolvimento web e modelagem de dados;<li>Suporte a desenvolvimento de aplicativos cliente-servidor e mobile.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "/assets/webp/logoIDE pyCharm.webp", "description": "Imagem do <a href='https://www.jetbrains.com/pycharm/' target='_blank'>PyCharm</a>"},
                                "pathVideoSuperior": "",
                                "texto": "</ul><strong>4. PyCharm</strong>:<br/>O <strong>PyCharm</strong>, tamb√©m desenvolvido pela JetBrains, √© uma IDE dedicada ao desenvolvimento em Python. Suas caracter√≠sticas incluem:<ul><li>Suporte avan√ßado para Python, incluindo an√°lise de c√≥digo, depura√ß√£o e refatora√ß√£o;<li>Integra√ß√£o com frameworks populares como Django, Flask e Pyramid;<li>Ferramentas para desenvolvimento web, cient√≠fico e de an√°lise de dados em Python.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "/assets/webp/logoIDE sublime.webp", "description": "Imagem do <a href='https://www.sublimetext.com/' target='_blank'>Sublime Text</a>"},
                                "pathVideoSuperior": "",
                                "texto": "</ul><strong>5. Sublime Text</strong>:<br/>O <strong>Sublime Text</strong> √© uma IDE leve e altamente personaliz√°vel, popular entre os desenvolvedores devido √† sua velocidade e simplicidade. Algumas caracter√≠sticas incluem:<ul><li>Interface de usu√°rio limpa e f√°cil de usar;<li>Suporte a uma variedade de linguagens de programa√ß√£o;<li>Amplas op√ß√µes de personaliza√ß√£o por meio de plugins e temas.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "/assets/webp/logoIDE Atom.webp", "description": "Imagem do <a href='https://atom-editor.cc/' target='_blank'>Atom</a>"},
                                "pathVideoSuperior": "",
                                "texto": "</ul><strong>6. Atom</strong>:<br/>O <strong>Atom</strong> √© uma IDE de c√≥digo aberto desenvolvida pelo GitHub (particularmente era a minha preferida a uns anos atr√°s), conhecida por sua facilidade de uso e extensibilidade. Suas caracter√≠sticas incluem:<ul><li>Interface altamente personaliz√°vel com suporte a temas e pacotes de plugins;<li>Integra√ß√£o nativa com Git e GitHub para controle de vers√£o e colabora√ß√£o;<li>Suporte a uma variedade de linguagens de programa√ß√£o e ferramentas de desenvolvimento web.</ul><strong>Importante</strong>: O <strong>Atom</strong> n√£o est√° mais sendo ativamente desenvolvido, pois o GitHub anunciou que o projeto foi descontinuado. Isso significa que, embora ainda seja poss√≠vel usar o Atom, ele n√£o receber√° mais atualiza√ß√µes ou melhorias significativas (<b>Isso significa que voc√™ tamb√©m n√£o recebe atualiza√ß√µes de seguran√ßa o que pode representar riscos</b>). Portanto, para quem busca uma IDE que continue recebendo suporte e atualiza√ß√µes, pode ser mais interessante optar por outras op√ß√µes.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "/assets/webp/logoIDE vs.webp", "description": "Imagem do <a href='https://visualstudio.microsoft.com/pt-br/' target='_blank'>Visual Studio</a>"},
                                "pathVideoSuperior": "",
                                "texto": "<strong>7. Visual Studio</strong>:<br/>O <strong>Visual Studio</strong>, tamb√©m desenvolvido pela Microsoft, √© uma IDE robusta e poderosa amplamente utilizada por desenvolvedores Windows e .NET. Suas caracter√≠sticas incluem: <ul><li>Suporte a uma ampla variedade de linguagens, incluindo C#, Visual Basic, F# e TypeScript;<li>Ferramentas avan√ßadas de depura√ß√£o, teste e an√°lise de c√≥digo;<li>Integra√ß√£o com Azure para desenvolvimento de aplicativos em nuvem.</ul>",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "/assets/webp/logoIDE NetBeans.webp", "description": "Imagem do <a href='https://netbeans.apache.org/front/main/index.html' target='_blank'>NetBeans</a>"},
                                "pathVideoSuperior": "",
                                "texto": "<strong>8. NetBeans</strong>:<br/>O <strong>NetBeans</strong> √© uma IDE de c√≥digo aberto que oferece suporte a uma variedade de linguagens de programa√ß√£o, incluindo Java, PHP, C++ e JavaScript. Suas caracter√≠sticas incluem: <ul><li>Suporte a desenvolvimento web, desktop e m√≥vel;<li>Ferramentas avan√ßadas de edi√ß√£o de c√≥digo, depura√ß√£o e teste;<li>Integra√ß√£o com servidores de aplicativos e frameworks populares.</ul>",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "/assets/webp/logoIDE androidStudio.webp", "description": "Imagem do <a href='https://developer.android.com/studio?hl=pt-br' target='_blank'>Android Studio</a>"},
                                "pathVideoSuperior": "",
                                "texto": "<strong>9. Android Studio</strong>:<br/>O <strong>Android Studio</strong> √© a IDE oficial para o desenvolvimento de aplicativos Android, baseada no IntelliJ IDEA. Suas caracter√≠sticas incluem: <ul><li>Suporte completo ao desenvolvimento Android, incluindo cria√ß√£o de layouts, compila√ß√£o e depura√ß√£o;<li>Emulador de dispositivo Android integrado para teste de aplicativos;<li>Integra√ß√£o com ferramentas de an√°lise de desempenho e monitoramento.</ul>",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "/assets/webp/logoIDE xcode.webp", "description": "Imagem do <a href='https://apps.apple.com/us/app/xcode/id497799835?mt=12/' target='_blank'>Xcode</a>"},
                                "pathVideoSuperior": "",
                                "texto": "<strong>10. Xcode</strong>:<br/>O <strong>Xcode</strong> √© a IDE oficial para o desenvolvimento de aplicativos iOS, macOS, watchOS e tvOS, desenvolvida pela Apple. Suas caracter√≠sticas incluem:<ul><li>Suporte completo ao desenvolvimento iOS, incluindo interface de usu√°rio, compila√ß√£o e depura√ß√£o;<li>Emulador de dispositivo iOS integrado para teste de aplicativos;<li>Ferramentas avan√ßadas de an√°lise de desempenho e otimiza√ß√£o de c√≥digo.</ul>Vale lembrar que essa IDE por enquanto s√≥ funciona nos dispositivos Apple e conta tamb√©m com um emulador completo do sistema IOS!",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "/assets/webp/logoIDE cursor.webp", "description": "Imagem do <a href='https://www.cursor.com/' target='_blank'>Cursor IDE</a>"},
                                "pathVideoSuperior": "",
                                "texto": "<strong>11. Cursor IDE</strong>:<br/>A <strong>Cursor IDE</strong> tem se destacado no mercado, especialmente pelo seu foco em Intelig√™ncia Artificial, Desenvolvida pela Anysphere, a Cursor alcan√ßou um crescimento impressionante, atingindo <strong>$100 milh√µes em receita anual recorrente (ARR)</strong> em apenas 12 meses, representando um crescimento de <strong>9.900%</strong> em rela√ß√£o ao ano anterior. Entre suas principais funcionalidades, destacam-se:<ul><li><strong>Gera√ß√£o de c√≥digo com IA</strong>: Permite escrever c√≥digo utilizando instru√ß√µes em linguagem natural, facilitando a cria√ß√£o e atualiza√ß√£o de classes ou fun√ß√µes inteiras;<li><strong>Autocompletar inteligente</strong>: Previs√£o das pr√≥ximas edi√ß√µes de c√≥digo, antecipando as necessidades do desenvolvedor;<li><strong>Compreens√£o da base de c√≥digo</strong>: Capacidade de entender e fornecer informa√ß√µes sobre toda a base de c√≥digo, permitindo consultas em linguagem natural;<li><strong>Reescritas inteligentes</strong>: Possibilita atualizar v√°rias linhas de c√≥digo simultaneamente, facilitando refatora√ß√µes e implementa√ß√µes de mudan√ßas em massa;<li><strong>Compatibilidade com extens√µes</strong>: Como uma bifurca√ß√£o do Visual Studio Code, suporta a integra√ß√£o de extens√µes, temas e atalhos de teclado existentes, garantindo que os desenvolvedores possam manter seus fluxos de trabalho preferidos.</ul>A Cursor tem se mostrado particularmente √∫til para desenvolvedores que trabalham com stacks modernos como <strong>TypeScript</strong>, <strong>React</strong>, <strong>Next.js</strong> e <strong>Node.js</strong>, oferecendo uma experi√™ncia de desenvolvimento mais fluida e eficiente.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "Instala√ß√£o do Visual Studio Code (VS Code):",
                                "pathVideoSuperior": "https://youtu.be/9XXquPDsGmc",
                                "texto": "Para esse projeto, iremos utilizar a IDE Visual Studio Code, portanto, precisamos ver como realizar a instala√ß√£o completa do VS Code no Windows:"
                            },
                            {
                                "texto": "1. Acesse o site oficial de instala√ß√£o do VS Code: <a href='https://code.visualstudio.com' target='_blank'>https://code.visualstudio.com</a>"
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "2. Clique no bot√£o azul de instala√ß√£o (neste caso &quot;Download for Windows&quot;, mas pode variar conforme o idioma), para realizar o download do instalador:",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/imgExemploDownloadVsCode (4).webp", "description": "Imagem da p√°gina inicial do site de instala√ß√£o do VS Code"},
                                "pathVideoInferior": ""
                            },
                            {
                                "texto": "3. Execute o instalador:",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/imgExemploDownloadVsCode (3).webp", "description": "Apos o download, execute o instalador"}
                            },
                            {
                                "texto": "4. Leia e concorde com os termos e clique em avan√ßar:",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/imgExemploDownloadVsCode (2).webp", "description": "Leia e concorde com os termos e clique em avan√ßar"}
                            },
                            {
                                "pathImgSuperior": {"path": "", "description": ""},
                                "texto": "5. Marque as seguintes op√ß√µes (adicionar op√ß√£o para ‚Äúabrir com Code‚Äù, em arquivos e pastas) e clique em instalar e depois concluir:",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/imgExemploDownloadVsCode (1).webp", "description": "Marque as op√ß√µes indicadas para facilitar em projetos futuros"}
                            },
                            {
                                "texto": "Ap√≥s isso, o Visual Studio Code est√° instalado no seu computador e pronto para ser utilizado!",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/imgExemploDownloadVsCode (0).webp", "description": "Tela inicial do Visual Studio Code"}
                            },
                            {
                                "subtitulo": "Configura√ß√µes B√°sicas do Visual Studio Code",
                                "pathImgSuperior": {"path": "/assets/webp/exemplo/imgExemploDownloadVsCode (0).webp", "description":""},
                                "pathVideoSuperior": "",
                                "texto": "Na imagem acima, temos a tela inicial da IDE. Nela, podemos observar as seguintes op√ß√µes: Start/Come√ßar, New File/Novo Arquivo, Open File/Abrir Arquivo, Open Folder/Abrir Pasta, Clone Git Repository/Clonar Reposit√≥rio do Git e Connect to/Conectar-se a.",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (0).webp", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "pathVideoSuperior": "",
                                "texto": "As duas √∫ltimas op√ß√µes (Clone Git Repository e Connect to) servem para trabalhar com ambientes remotos, no caso, a primeira op√ß√£o, √© para trabalhar com um reposit√≥rio do github, que veremos nos m√≥dulos futuros, e, a op√ß√£o &quot;connect to&quot;, serve para conectar a um Workspace remoto do pr√≥prio VS Code, o que √© √∫til caso voc√™ tenha o seu projeto com os arquivos abertos no workspace em seu Desktop em casa e voc√™ queira continuar a edi√ß√£o de forma remota, acessando o seu Desktop de outra m√°quina.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "pathVideoSuperior": "",
                                "texto": "Por agora, focaremos nas tr√™s primeiras op√ß√µes, vamos clicar em &quot;New File&quot; e o programa nos mostrar√° o seguinte:",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (1).webp", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "pathVideoSuperior": "",
                                "texto": "Aqui, devemos inserir o nome do arquivo que ser√° criado, juntamente com sua respectiva extens√£o. No caso do Node.js, que herda do JavaScript, a extens√£o utilizada √© &quot;.js&quot;.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "pathVideoSuperior": "",
                                "texto": "Vamos criar agora o arquivo &quot;PrimeiroScript.js&quot; como exemplo: ",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (2).webp", "description": "Clique no bot√£o azul &quot;Create new file&quot;"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "pathVideoSuperior": "",
                                "texto": "Ap√≥s isso o Windows abrir√° uma caixa de di√°logo para salvar o arquivo em um diret√≥rio, por agora, crie uma pasta na √°rea de trabalho com o nome &quot;Aula&quot;, e salve o arquivo, ap√≥s isso, seremos direcionados para a tela de edi√ß√£o do arquivo: ",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (3).webp", "description": "<b>At√™n√ß√£o!</b> Essa tela pode estar levemente diferente, dependendo se h√° alguma extens√£o instalada!"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "pathVideoSuperior": "",
                                "texto": "E assim come√ßa a divers√£o! Aqui vamos escrever nosso primeiro c√≥digo em Node.js, que ser√° um simples console.log(‚ÄúHello World!‚Äù).<br/> Para isso, vamos escrever o seguinte c√≥digo:",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (4).webp", "description": "Codigo de exemplo do primeiro script em Node.js, ap√≥s escrever o c√≥digo, salve com o atalho CTRL + S"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "pathVideoSuperior": "",
                                "texto": "Para executar o c√≥digo, basta clicar em &quot;Run&quot; no menu:",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (5).webp", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "pathVideoSuperior": "",
                                "texto": "Depois clique em &quot;Run without Debuggin&quot;(ou utilize o atalho CTRL + F5): ",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (6).webp", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "pathVideoSuperior": "",
                                "texto": "E selecione o Node.js como o debugger: ",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (7).webp", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "pathVideoSuperior": "",
                                "texto": "Apos isso, o c√≥digo ser√° executado e o resultado ser√° impresso para voc√™ ver no pr√≥prio VS Code: ",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (8).webp", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "texto": "Agora caso queira rodar mesmo o projeto em um terminal, podemos abrir o terminal integrado do VS Code, clicando em &quot;Terminal&quot; e depois em &quot;New Terminal&quot; ou utilizando o atalho CTRL + SHIFT + ` (a tecla acima do TAB):",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (9).webp", "description":""}
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "texto": "Como ainda n√£o estamos com um workspace aberto, temos que direcionar o terminal para a pasta do projeto, no caso, salvamos na area de trabalho, ent√£o vamos digitar o seguinte comando: <code>cmd</code> e pressionar ENTER: ",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (10).webp", "description":""}
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "texto": "Ap√≥s isso, digitamos o seguinte comando: <code>cd %userprofile%/desktop/Aula</code>, isso direcionar√° o terminal para a pasta do projeto, digite o comando e pressionar ENTER: ",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (11).webp", "description":""}
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "texto": "E, por fim, digite: <code>node ./PrimeiroScript.js</code> para executar o c√≥digo:",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (12).webp", "description":""}
                            },
                            {
                                "subtitulo": "Abrindo um workspace:",
                                "pathImgSuperior": {"path": "", "description":""},
                                "texto": "Um workspace √© um espa√ßo de trabalho onde voc√™ pode organizar seus projetos e arquivos, √© bom ter em mente que para projetos inteiros, sempre vamos trabalhar com workspaces, mas, em resumo, um workspace √© uma pasta salva em algum lugar no seu computador, com ela aberta no VS Code, sempre que voc√™ abrir o software novamente, ele vai continuar no workspace que voc√™ parou, ou seja, com os arquivos que voc√™ estava editando.",
                                "pathImgInferior": {"path": "", "description":""}
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "texto": "Tendo em vista a import√¢ncia de ter um workspace no VS Code, vamos aprender a criar um workspace e abrir ele no VS Code. Para isso, clique em &quot;Open Folder&quot; na tela inicial do VS Code, ou clique &quot;File&quot;, no menu, e depois em &quot;Open Folder&quot;, ou pressione o atalho CTRL + O: ",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (13).webp", "description":"Maneiras de abrir um workspace"}
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "texto": "Ao abrir a pasta, ele solicitar√° essa permiss√£o para ele tratar a pasta como uma pasta confi√°vel, assim, tirando as limita√ß√µes que possam ter, se a pasta foi voc√™ que criou, como a que criamos, no caso &quot;Aula&quot;, voc√™ pode permitir que ele trate como confi√°vel clicando no bot√£o azul &quot;Yes i trust the authors&quot;: ",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (14).webp", "description":"Caixa de di√°logo solicitando a permiss√£o para tratar a pasta como uma pasta confi√°vel, clique no bot√£o azul para continuar!"}
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "texto": "Essa fun√ß√£o de abrir a pasta, na realidade esta criando o workspace dentro do VS Code, ap√≥s abrir a pasta que ser√° seu projeto, j√° podemos come√ßar a trabalhar, ap√≥s abrir a alguma pasta vazia como workspace, essa ser√° nossa tela: ",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (15).webp", "description":"Explica√ß√£o de como o VS Code organiza e exibe os itens da pasta"}
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description":""},
                                "texto": "E assim terminamos essa parte, agora voc√™ ja sabe como funciona o gerenciamento de arquivos do VS Code. Voc√™ agora concluiu um passo importante para come√ßar a escrever c√≥digos e est√° no caminho certo para se tornar um desenvolvedor de sucesso.",
                                "pathImgInferior": {"path": "", "description":""}
                            }
                            
                        ]
                    },
                    {
                        "titulo": "Como come√ßar um projeto Node.js e as configura√ß√µes iniciais",
                        "descricao": "Aqui vamos criar o primeiro projeto em Node.js contendo um endpoint b√°sico de hello world",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description":""},
                        "pathVideoSessao": "",
                        "highlightColor": "#68EC13",
                        "paragrafos": [
                            {
                                "texto": "Para criar um projeto em Node.js, precisamos criar uma pasta para o projeto, e, depois abrir ela no Visual Studio Code como um workspace.",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/novoProjetoVsCode (13).webp", "description": "Temos essas duas formas de abrir uma pasta no VS Code, e, tamb√©m temos o CTRL + O"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Nesse caso, vamos utilizar a pasta Aula ja criada na √°rea de trabalho, e, vamos abrir um novo terminal integrado do Visual Studio Code, clicando em &quot;Terminal&quot; e depois em &quot;New Terminal&quot;, ou utilizando o atalho CTRL + SHIFT + ` (a tecla acima do TAB):",
                                "pathImgInferior": {"path":"/assets/webp/exemplo/novoProjetoVsCode (9).webp", "description":"Abrindo um novo terminal integrado"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Com o terminal aberto, vamos digitar <code>cmd</code> e pressionar Enter: ",
                                "pathImgInferior": {"path":"/assets/webp/exemplo/novoProjetoVsCode (10).webp", "description":"Abrindo um novo terminal integrado"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Depois, vamos digitar o comando <code>npm init</code> e pressionar Enter: ",
                                "pathImgInferior": {"path":"/assets/webp/exemplo/imgPrimeiraAPI (1).webp", "description":"Iniciando um projeto com &quot;npm init&quot;"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "A partir, o terminal vai nos passar um question√°rio sobre o nome do pacote, e nome do projeto, vers√£o, descri√ß√£o, ponto de partida, reposit√≥rio, autor e licen√ßa. Para o nosso projeto, vamos deixar tudo padr√£o, ent√£o, basta pressionar Enter para continuar em tudo que for solicitado:",
                                "pathImgInferior": {"path":"/assets/webp/exemplo/imgPrimeiraAPI (2).webp", "description":"Quando chegar nessa parte, chegamos ao final das perguntas e o projeto estar√° iniciado"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Ap√≥s isso, o projeto estar√° criado e iniciado, por padr√£o ele cria um arquivo chamado package.json, que √© o arquivo de configura√ß√£o do projeto, onde ficam as depend√™ncias e informa√ß√µes do projeto, como o nome, vers√£o, descri√ß√£o, reposit√≥rio, autor e licen√ßa. O arquivo package.json √© muito importante para o Node.js, pois ele √© utilizado pelo npm (Node Package Manager) para gerenciar as depend√™ncias do projeto:",
                                "pathImgInferior": {"path":"/assets/webp/exemplo/imgPrimeiraAPI (3).webp", "description":"Estrutura criada"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Por padr√£o, a estrutura criada, ela exige que tenha um arquivo principal chamado index.js, que √© necess√°rio para o Node.js portanto, vamos criar esse arquivo, clicando no bot√£o &quot;New File&quot;:",
                                "pathImgInferior": {"path":"/assets/webp/exemplo/imgPrimeiraAPI (4).webp", "description":"Bot√£o para criar o arquivo"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Vamos criar o arquivo index.js:",
                                "pathImgInferior": {"path":"/assets/webp/exemplo/imgPrimeiraAPI (5).webp", "description":""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Agora, vamos fazer a instala√ß√£o do express, esse que √© um pacote respons√°vel por criar um servidor http em node.js, ele nos ajuda a subir um servidor de forma mais r√°pida, para isso, vamos digitar o comando no terminal <code>npm install express</code>:",
                                "pathImgInferior": {"path":"/assets/webp/exemplo/imgPrimeiraAPI (6).webp", "description":"Digite o comando e tecle enter!"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Depois de instalar o express, vamos come√ßar importando e configurando o express, o express como foi dito acima, cria o servidor http e nos permite configurar rotas de api, endpoints ou aplica√ß√µes da web, vamos importar o pacote dessa forma: na linha 1, vamos digitar <code>const express = require('express');</code>, na linha 2 vamos criar uma instancia do express e colocar na constante <code>const app = express();</code>, e, na linha 3, vamos indicar a porta de rede que o servidor ser√° hospedado:",
                                "pathImgInferior": {"path":"/assets/webp/exemplo/imgPrimeiraAPI (7).webp", "description":"Configura√ß√£o do express"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Em seguida, vamos configurar uma rota padr√£o no caso /, rotas √© o direcionamento da url, sabe quando voc√™ digita &quot;instagram.com/nome da conta&quot;, esse &quot;/nome da conta&quot;, √© uma rota para aquela p√°gina correspondente ao usu√°rio do instagram, a rota padr√£o &quot;/&quot;, representa o &quot;instagram.com/&quot;, que √© a p√°gina inicial padr√£o da api, por isso, vamos criar a rota padr√£o que nos retorne como resposta &quot;Hello World&quot;, para isso, digitamos os seguintes c√≥digos:",
                                "pathImgInferior": {"path":"/assets/webp/exemplo/imgPrimeiraAPI (8).webp", "description":"Configura√ß√£o da rota"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Apenas para deixar claro, na linha 5, estamos dizendo <code>app.get()</code>, que √© um dos m√©todos de requisi√ß√£o HTTP, que √© o <code>GET</code>, que √© o que estamos utilizando para fazer a requisi√ß√£o, vale lembrar que os m√©todos de requisi√ß√£o HTTP existentes s√£o: <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, e mais alguns outros que n√£o veremos por agora por serem mais avan√ßados e complexos.",
                                "pathImgInferior": {"path":"", "description":""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Os m√©todos mais usados s√£o o <code>POST</code> e <code>GET</code>, o m√©todo <code>GET</code>, √© utilizado para pegar dados, ou seja, quando voc√™ quer pegar algo do servidor, e o <code>POST</code>, √© utilizado para enviar dados, ou seja, quando voc√™ quer enviar algo para o servidor. O <code>PUT</code>, √© utilizado para atualizar dados, e o <code>DELETE</code>, √© utilizado para deletar dados, no caso, o <code>GET</code> ele faz uma requisi√ß√£o do tipo &quot;Servidor, me envie o dado tal&quot;, mas ele vai fazer isso atrav√©z da url, ou seja, quando voc√™ digita uma url no navegador, ele faz uma requisi√ß√£o do tipo <code>GET</code>, e o servidor responde com o dado que voc√™ pediu, j√° o <code>POST</code>, ele faz uma requisi√ß√£o do tipo &quot;Servidor, me envie o dado tal, mas, eu tamb√©m quero enviar algo para voc√™&quot;, ou seja, ele envia um dado junto com a requisi√ß√£o, e o servidor responde com o dado que voc√™ pediu, isso √© utilizado em sistemas de login, por exemplo, al√©m de ser um m√©todo mais seguro, pois ele n√£o exp√µe os dados na url, como o <code>GET</code>, que exp√µe os dados na url, por isso, o <code>POST</code>, √© mais utilizado para enviar dados sens√≠veis, como senhas e dados pessoais.",
                                "pathImgInferior": {"path":"", "description":""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Continuando, a gente tem ja o <code>app.get(&quot;/&quot;)</code>, significa, que ele est√° aguardando uma requisi√ß√£o da rota padr√£o, que √© a rota &quot;/&quot;, e, quando ele receber essa requisi√ß√£o, ele vai executar a fun√ß√£o que est√° dentro do <code>app.get()</code>, que no caso, √© a fun√ß√£o que vai retornar o &quot;Hello World&quot;, indicado na linha 6, atrav√©z de <code>res.send(&quot;Hello World&quot;)</code>, que, traduzindo, ele fala &quot;se houver uma requisi√ß√£o na rota padr√£o &quot/&quot; eu vou enviar uma resposta, essa resposta √© um texto &quot;Hello World&quot;, e, por fim, na linha 7 estamos fechando as chaves e par√™nteses do <code>app.get()</code>.",
                                "pathImgInferior": {"path":"", "description":""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Um detalhe importante, o Node.js √© uma linguagem vers√°til, em que n√£o √© necess√°rio inserir os pontos e virgulas ao final de cada linha, mas √© uma boa pr√°tica inserir, pois, assim, torna o c√≥digo mais leg√≠vel. Portanto, vamos adicionar os pontos e virgulas ao final de cada linha. Mas, n√£o √© toda linha que podemos colocar o ponto e v√≠rgula, por exemplo, n√£o podemos colocar o ponto e v√≠rgula no final do <code>app.listen()</code>, pois, ele √© um m√©todo que n√£o retorna nada, ou seja, ele n√£o tem um valor de retorno, ent√£o, n√£o faz sentido colocar o ponto e v√≠rgula no final dele.",
                                "pathImgInferior": {"path":"", "description":""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Por fim, nas linhas 9 a 11, estamos iniciando o servidor, e, dizendo para ele escutar na porta 3000, e, quando o servidor estiver rodando, ele vai imprimir no console a mensagem &quot;Servidor rodando na porta 3000&quot;, podemos ver isso abaixo:",
                                "pathImgInferior": {"path":"/assets/webp/exemplo/imgPrimeiraAPI (8).webp", "description":"Executando o servidor na porta 3000"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "/assets/webp/exemplo/imgPrimeiraAPI (10).webp", "description": "Codigo final do projeto"},
                                "pathVideoSuperior": "",
                                "texto": "Bom, esse foi o nosso c√≥digo, agora, vamos executar o projeto, para isso, vamos abrir o terminal integrado do VS Code, clicando em &quot;Terminal&quot; e depois em &quot;New Terminal&quot;, ou utilizando o atalho CTRL + SHIFT + ` (a tecla acima do TAB) e digitar o seguinte comando: <code>node index.js</code>, e pressionar ENTER:",
                                "pathImgInferior": {"path":"/assets/webp/exemplo/imgPrimeiraAPI (11).webp", "description":"Executando o c√≥digo"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "E, se tudo deu certo, o servidor vai estar rodando e voc√™ vai ver a seguinte mensagem no terminal: &quot;Servidor rodando na porta 3000&quot;:",
                                "pathImgInferior": {"path":"/assets/webp/exemplo/imgPrimeiraAPI (12).webp", "description":"Servidor em execu√ß√£o"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Agora, vamos abrir o navegador (google chrome, ou edge, ou firefox..) e digitar o seguinte endere√ßo: http://localhost:3000 (localhost) √© o nome dado ao endere√ßo local do seu computador, s√≥ √© acess√≠vel na sua m√°quina por enquanto, voc√™ vai ver a mensagem &quot;Hello World&quot; na tela do navegador:",
                                "pathImgInferior": {"path":"/assets/webp/exemplo/imgPrimeiraAPI (13).webp", "description":"Tela do navegador exibindo o Hello World"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "E √© isso, agora voc√™ tem um servidor rodando na sua m√°quina, e, voc√™ pode acessar ele pelo navegador, ou por alguma requisi√ß√£o que v√° ser feita por outro c√≥digo por exemplo. Agora, voc√™ j√° sabe como criar um projeto em Node.js e como configurar o express para criar um servidor http.",
                                "pathImgInferior": {"path":"", "description":""},
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        },
        {
            "titulo": "üì¶ Gerenciamento de pacotes via NPM",
            "descricao": "Veja como funciona o sistema de gerenciamento de pacotes do Node.js e como realizar instala√ß√µes, exclus√µes, atualiza√ß√µes e checagem de vers√µes do pacote, mantendo os pacotes atualizados e seguros.",
            "pathImgModulo": "",
            "categoria": "NPM",
            "duracao": "1h",
            "colors": {
                "main": "#9E1515",
                "background": "#E3B8B8"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "Como funciona o sistema de gerenciamento de pacotes do Node.js?",
                        "descricao": "Entenda o papel do npm, como funcionam os pacotes e sua import√¢ncia na gest√£o de depend√™ncias.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "NPM √© um gerenciador de pacote instalado junto ao pr√≥prio Nodejs. √â como se fosse a playstore do android que se encontra diversas aplica√ß√µes a ser utilizadas em seu projeto com fundamento poupar tempo e facilitar a vida do programador. Dentro desse cursos vamos usar algumas como exemplo o Express.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Um dos paradigmas fundamentais que temos que ter em mente sobre o Nodejs √© que o mesmo √© modularizado, por isso teremos muitos callbacks de entrada e sa√≠da e usaremos muito em todos os projetos em vida o require(). O NPM significa Node Package Manager e esse pacotes s√£o m√≥dulos, os mais famosos s√£o o Express, Nodemon, Cors, Pm2 dentre outros. Os c√≥digos b√°sicos s√£o <strong>npm install nome_do_pacote</strong>/ para instalar o modulo. <b>npm -g install nome_do_pacote</b>// Para instalar o modulo usando o reposit√≥rio global. <b>npm install nome_do_pacote --savedev</b>// para instalar o modulo com depend√™ncia na m√°quina assim n√£o ficar√° s√≥ no projeto ‚Äú√© como se fosse executar o modulo com permiss√£o de administrado no PC‚Äù. <b>npm remove nome_do_pacote</b>// desinstala o pacote do projeto em quest√£o. C√≥digo recomendado a utilizar ao instalar o pacote <b>npm install -g nome_do_pacote --savedev</b>.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Conceito de depend√™ncias",
                        "descricao": "Aprenda o que s√£o depend√™ncias, a diferen√ßa entre depend√™ncias de produ√ß√£o e desenvolvimento e como gerenci√°-las.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "No desenvolvimento de software com Node.js, o conceito de depend√™ncias refere-se a m√≥dulos, bibliotecas ou pacotes externos que seu projeto precisa para funcionar corretamente. Essas depend√™ncias podem ser bibliotecas de terceiros, frameworks, ferramentas de constru√ß√£o, ou at√© mesmo outros m√≥dulos que voc√™ mesmo criou.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Bem , temos diversos tipos de depend√™ncia vamos explicar um por um. <b>Depend√™ncia Padr√£o</b> s√£o pacotes essenciais para o funcionamento em produ√ß√£o com j√° citado express, lodash, axios‚Ä¶ todos s√£o listado em arquivo chamado package.json na chave <i>dependencies</i>. <b>Depend√™ncia Opcionais</b> s√£o pacotes que se n√£o poderem ser instalados, n√£o dever√£o impedir a instala√ß√£o nem o funcionamento do projeto, usa-se esse recurso quando tens pacote especifico que pode  haver de n√£o estar dispon√≠veis em todos os sistemas operacionais, s√£o listada no arquivo package.json na chave <i>optinalDependencies</i>. <b>Depend√™ncias de Desenvolvimento</b> s√£o pacotes necess√°rios s√≥ durante a produ√ß√£o do projeto, mas n√£o para o projeto em si na sua instala√ß√£o e funcionamento. Exemplos eslint, jest, typescript‚Ä¶ s√£o listada no arquivo package.json na chave <i>devDependencies</i>. <b>Depend√™ncias de pares</b> s√£o pacotes que o projeto necessita que o usu√°rio tenha instalado na m√°quina e n√£o pode ser instalado de forma autom√°tica, mas sim manual! Como plugins ou biblioteca exemplo webpack, isso tamb√©m s√£o listada no arquivo package.json na chave <i>peerDependencies</i>.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Como instalar pacotes do Node.js",
                        "descricao": "Veja como instalar pacotes globais e locais usando npm ou yarn, al√©m de entender o package.json e o node_modules.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "",
                        "highlightColor": "#68EC13",
                        "paragrafos": [
                            {
                                "texto": "Entra no terminal/cmd: digita <b>npm install nome_do_modulo</b>. O resultado √© similar ao da imagem abaixo como quantidade de pacotes feito download, quantidade de pacotes auditado, quantidade de pacotes enxergado e encontrado e quantidade de vulnerabilidades. Na aba explore depois do pacote ser instalado vai surgir uma pasta chamado <b>node_modules</b> e tamb√©m um aquivo <i>package.json</i> e <i>package-lock.json</i>",
                                "pathImgInferior": {"path":"../assets/webp/Exemplo/npm ex1.webp", "description":""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Como remover pacotes do Node.js",
                        "descricao": "Aprenda a desinstalar pacotes corretamente, garantindo a limpeza do projeto e a organiza√ß√£o das depend√™ncias.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "",
                        "highlightColor": "#F28318",
                        "paragrafos": [
                            {
                                "texto": "Para remover pacotes no nodejs usamos o <b>npm remove nome_do_pacote</b>, bem simples e claro!",
                                "pathImgInferior": {"path":"../assets/webp/Exemplo/npm remove.webp", "description":""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Depois da execu√ß√£o do c√≥digo vai aparecer a quantidade de pacotes removido,auditado e vulner√°veis. E a pasta node_modules vai ser limpa e o arquivo package.json vai ser atualizado.",
                                "pathImgInferior": {"path":"../assets/webp/Exemplo/npm remove 2.webp", "description":""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Como atualizar pacotes do Node.js e gerenciamento de vers√µes de pacotes",
                        "descricao": "Descubra como atualizar pacotes, lidar com vers√µes espec√≠ficas e utilizar o package-lock.json para manter a compatibilidade.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#7515ED",
                        "paragrafos": [
                            {
                                "texto": "Para atualizar os pacotes, podemos come√ßar pela verifica√ß√£o do pacotes, usando <b>npm outdated</b>, para atualizar os pacotes de acordo com as configura√ß√µes do <i>package.json</i>, caso queira atualizar um projeto especifico pode-se usar <b>npm update nome_do_pacote</b>. Caso queira testa o modulo instalado pode-se usar npx, para verificar se a instalado em sua m√°quina pode usar <b>which npx</b>, caso n√£o ha pode-se usar <b>npm install -g npx</b>, para atualizar para vers√µes mais recente usa-se <b>npx npm-check-update -u npm install</b> ou pode-se usar apenas ou <b>npm install</b> que vai simplemente atualizar usando como refer√™ncia os dados do package.json.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        },
        {
            "titulo": "üßë‚Äçüíª Fundamentos do JavaScript no Node.js",
            "descricao": "Revise os principais conceitos do JavaScript, e, entenda o quais s√£o as diferen√ßas que existem entre CommonJS e ESModules.",
            "pathImgModulo": "",
            "categoria": "Fundamentos",
            "duracao": "1h",
            "colors": {
                "main": "#4B9E15",
                "background": "#D4EEC3"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "Caracteristicas e limita√ß√µes comuns do JavaScript",
                        "descricao": "Explore as principais caracter√≠sticas e limita√ß√µes do JavaScript, como sua natureza ass√≠ncrona e o gerenciamento de escopo.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#68EC13",
                        "paragrafos": [
                            {
                                "texto": "As principais do JavaScript no Nodejs s√£o o <i><b>Event Loop</b></i> um modelo non-blocking, permitindo opera√ß√µes concorrentes sem bloquer a thread principal e ideal para aplica√ß√µes simult√¢neas de I/O. <i><b>Single-Threaded</b></i>, o Node.js roda em uma √∫nica thread, mas usa <i><b>Worked Threads</b></i> para tarefas pesadas em CPU e escalabilidade via cluster mode(m√∫ltiplas inst√¢ncias do Node). <i><b>CommonJS</i></b> e <i><b>ESM(M√≥dulos)</b></i> √© suporte a m√≥dulos via <b>require()</b>, <b>Common.JS</b> e <b>import(ES Modules)</b>, depend√™ncia gerenciada pelo npm ou yarn. V8 Engine, executar JavaScript com alta performace e suporte a recursos modenos do <i><b>ECMAScript(ES6+)</b></i>. <i><b>Streams</i></b> e <i><b>Buffers</b></i>, otimiza para manipula√ß√£o de dados em fluxo(streams) e opera√ß√µes com buffers.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "As limita√ß√µes principais s√£o <i>Single-Threaded</i></b> problemas com <i><b>CPU-Intensive Task</i></b>, c√≥digo bloqueante com os loops pesados e pode trava o <b>Event Loop</b>, solu√ß√µes <b>Worker Threads</b>, delegar tarefa a outros servi√ßos. <b>Callback Hell</b>, aninhamento excessivo de callbacks antes de <i><b>promises/async-await</b></i>, solu√ß√£o e usar um async/await ou bibliotecas como Promise.all. Gerenciamento de mem√≥ria, vazamento de mem√≥ria podem ocorrer se n√£o forem liberadas refer√™ncias. Depend√™ncia Externas(NPM), o ecossistema tem milh√µes de pacotes, mas alguns podem ter m√° qualidade ou vulnerabilidade, problemas com dependency hell(vers√µes conflitante). Falta de suporte a <i><b>Multi-threading</i></b> Nativo, Embora existam <b>Worker Threads</b>, n√£o √© t√£o simples quanto em linguagens como Java ou Go. Processamento de Dados Bin√°rios, Embora o Node.js tenha <b>Buffer</b>, manipula√ß√£o avan√ßada de bin√°rios pode ser menos eficiente que em C/C++. Mudan√ßas r√°pidas na api, algumas api do node.js mudam entre vers√µes, exigindo atualiza√ß√µes frequentes. Seguran√ßa, vulnerabilidade em pacotes de terceiros( npm audit √© essencial), configura√ß√µes incorretas podem expor dados sens√≠veis em produ√ß√£o.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Principais conceitos do JavaScript",
                        "descricao": "Compreenda conceitos chave do JavaScript, como vari√°veis, fun√ß√µes, objetos, arrays e a manipula√ß√£o do DOM.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "A linguagem JavaScript √© excepcional, pois ao mesmo tempo que √© extremamento complexas, a mesmo consegue ser muito intuitiva e f√°cil de compreender suas nuncias. Aqui vamos ver seus conceitos principais. Os tipos de dados e vari√°veis temos o <b><i>var</i></b>, <b><i>let</i></b> e <b><i>const</i></b> esses s√£o padr√µes para declara√ß√µes. Os primitivos s√£o exempladamente <i><b>string</b></i>, <i><b>number</b></i>, <i><b>boolean</b></i>, <i><b>null</b></i>, <i><b>undefined</b></i>, <i><b>symbol</b></i>, <i><b>bigint</b></i>. Os Objetos s√£o ditos como <i><b>object</b></i> e <i><b>array []</i></b>.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Para opera√ß√µes temos s√≠mbolos para indicar a cada sua fun√ß√µes, <b>somar +</b>, <b>subtrair -</b>, <b>multiplicar *</b>, <b>dividir /</b>, obter o restos da <b>divis√£o %</b>. Para obter o resultado de uma compara√ß√£o, o mesmo sera em uma resposta boolean como verdadeiro/falso, <b>verificar se √© igual o valor (==)</b>, <b>verificar se √© igual o valor e tipo (===)</b>, <b>verificar que √© diferente o valor (!=)</b>, <b>verifica que √© diferente o valor e tipo (!==)</b>, <b>verificar que √© maior (>) ou menor (<)</b>.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Os operadores l√≥gicos ajudam muito na formaliza√ß√£o da senten√ßa da opera√ß√£o, em javascript temos tr√™s. O <b>se e somente se (&&)</b> ex: ((5 + 3 == 8) && (3 + 5 == 8) ) == verdadeiro. <b>O se esse ou esse (||)</b> ex: ((4%2 == 0) || (3%2 == 0)) == verdadeiro, para avaliar a nega√ß√£o de uma senten√ßa s√≥ preciso usar o <b>simbolo (!)</b> ex: !(2 + 3 == 6) == verdadeiro.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "As atribui√ß√µes come√ßa pelo <b>s√≠mbolo (=)</b> ex: A = 5 o vari√°vel oberar o valor 5 em sua composi√ß√£o. O <b>simbolo (+=)</b> ex: A += 5 o valor 5 somara com o valor que est√° dentro da vari√°vel. O <b>simbolo (-=)</b> ex: A -= 5 o valor subtrair√° o valor que est√° dentro da vari√°vel.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Diante as estruturas de controle, s√£o todas as padr√µes de qualquer linguagem. Temos o <b>if...else = se...sen√£o</b>, <b>switch == cole√ß√£o de probabilidade</b>. Os loops temos o <b>for == parar em alguma estancia</b>, <b>while == enquanto algo operacional estiver acontecendo</b>, <b>do...while == fazer enquanto algo estiver acontecendo</b>, <b>for...of == √© loop que permite iterar sobre elementos</b>, <b>for...in == j√° √© um loop usado parar iterar sobre propriedades enumer√°veis de um objetos</b>.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Temos 4 tipos de fun√ß√µes. A declara√ß√£o <b>function nomeFun√ß√£o(){}</b>. Express√£o <b>const funcao = function(){}</b>. Arrow functions <b>() => {}</b>. E o par√¢metros e retorno (<b>return</b>). O retorno √© o valor que a fun√ß√£o devolve ap√≥s sua execu√ß√£o, e o par√¢metro √© o valor que a fun√ß√£o recebe como entrada. Exemplo: function soma(a, b) { return a + b; } onde a e b s√£o os par√¢metros e o resultado da soma √© o retorno da fun√ß√£o.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Os principais objetos e prot√≥tipos s√£o a cole√ß√£o de propriedade ({ chave: valor }), heran√ßa baseada em prot√≥tipos e n√£o em classe tradicionas.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "No javaScript os m√©todos s√£o diversos. O <b>push()</b> √© usado para adicionar um o mais elementos ao final de um array e retornar o novo comprimento do array. O <b>pop()</b> remove o √∫ltimo elemento de um array e retornar esse elemento, modifica o array original e se tiver vazio retorna <i>undefined</i>. O m√©todo <b>shift()</b> remove o primeiro elemento de um array e retorna esse elemento. Modificando o array original e deslocando todos os outros elementos para um √≠ndice menor. O m√©todo <b>unshift()</b> adiciona um ou mais elementos no in√≠cio de um array e retorna o novo comprimento do array, deslocando os elementos existentes para √≠ndices maiores. O m√©todo map() √© uma fun√ß√£o de arrays em javaScript que cria um novo array com os resultados da aplica√ß√£o de cada elemento do array original. J√° o m√©todo <b>filter()</b> cria um novo array com todos os elementos que passam em uma implementa√ß√£o fornecida pela fun√ß√£o. √â extremamente √∫lti para selecionar elementos de array baseado em condi√ß√µes espec√≠ficas. O m√©todo <b>reduce()</b> √© umas das opera√ß√µes para manipula√ß√£o de arrays em JavaScript, executa uma fun√ß√£o redutora para cada elemento do array resultando em um √∫nico valor de retorno. J√° o <b>forEach()</b> √© uma fun√ß√£o fornecida uma vez para cada elemento de um array, em ordem crescente de √≠ndice, sendo muito diferente de map() ou filter(), o forEach n√£o retorna um novo array o fundamento dele √© usado para sanar efeitos colaterais.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "No <i><b>√¢mbito de vari√°vel</i></b> de escopo √© algo bem simples, temos a global (<b>var</b>) e a de bloco (<b>let e const</b>) que fica retida na (<b>{}</b>) da fun√ß√£o em afim.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "J√° no <i><b>Eventos e Dom(Document Object Model)</b></i>, temos os elementos <b>document.querySelector()</b> aqui pode se buscar uma classe ou Id do m√©todo em quest√£o, no <b>getElementById()</b> aqui se busca s√≥ o ID. Na manipula√ß√£o temos o <b>innerHTML</b> para manipular <i><b>TAGS</b></i>. No <b>textContent</b> √© um elemento que permite ler ou definir o conte√∫do textual de um elemento HTML excluindo tegs e coment√°rios. Em ultimo dos Eventos  Dom temos <b>addEventListener()</b> esse m√©todo permite colocar um ouvinte nos eventos ao um elemento HTML especifico, assim ocorrendo um clique, tecla pressionada ou movimenta√ß√£o do mouse, assim adiante.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "J√° no √¢mbito <i><b>Assincronismo</b></i> √© um conceito que permite a execu√ß√£o de opera√ß√µes demoradas sem bloquear a thread principal, temos em primeiro lugar os <b>Callbacks</b> que √© nada mais que fun√ß√µes passadas como argumentos para serem executadas depois. <b>Promises</b> √© um objeto que representa a eventual conclus√£o ou falha de uma opera√ß√£o ass√≠ncrona, temos a <i>.then()</i> √© um m√©todo de Promises usado para lidar com o resultado bem-sucedido de uma opera√ß√£o ass√≠ncrona, tamb√©m permite encadear opera√ß√µes na forma limpa e leg√≠vel. Outra √© o <i>.catch()</i> um m√©todo essencial para tratar erros em promises no JavaScript, ele procura e capta falhas no c√≥digos dentro de uma Promise ou .then() anterior no encadeamento. J√° em ultimo nas Promises <i>Async/Await</i> √© uma forma mais modernar, atual e leg√≠vel de trabalhar com opera√ß√µes ass√≠ncronas em JavaScript, assim permitindo escrever c√≥digos de maneira s√≠ncrona, facilitando o entendimento e a manuten√ß√£o do mesmo. Em ultimo dos Assincronismo temos o <b>Fetch API</b> √© a forma mais moderna de fazer requisi√ß√µes HTTP em JavaScript, substituindo o antigo <i>XMLHttpRequest</i>, ela fornece uma interface mais poderosa e flex√≠vel para buscar recursos de forma ass√≠ncrona, retornando promises nativas.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "O <i><b>tratamento de erros</b></i> no c√≥digos √© constituindo pelo <b>try/catch</b> √© uma estrutura fundamental em JavaScript para capturar e tratar erros de formar controlada, assim evitando quebras inesperadas que interrompam o fluxo do c√≥digo. E tamb√©m √© constituindo pelo <b>finally</b> um bloco em uma parte estrutural do try/catch que sempre √© executado independente  de ocorrer um erro ou n√£o.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "No JavaScript temos a <i><b>Classes(ES6+)</b></i> que obt√©m a sintaxe <b>class</b> que √© a forma mais clara e orientada ao objeto para criar estruturas reutiliz√°veis com uma sintaxe limpa e recursos avan√ßados. Temos tamb√©m o <b>constructor</b> um m√©todo em classes que automaticamente quando o objeto √© criado o mesmo √© executado a partir da classes. J√° no conceito de heran√ßa temos o <b>extends</b> que permite criar uma classe filha em uma classe pai, herdando seus m√©todos e propriedade.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Em <i><b>M√≥dulos (ES6)</b></i> temos duas modulariza√ß√µes, o <b>import  e export</b>  √© uma forma moderna de compartilhar e organizar arquivos JavaScript, esse sistema do ES6 surgiu para substituir os antigos sistema como CommonJS e AMD",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "O <i><b>Hoisting</b></i> em JavaScript √© um comportamento tipico onde a declara√ß√£o de vari√°veis e fun√ß√µes s√£o movidas para o topo de seu escopo antes da execu√ß√£o do c√≥digo.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "O <i><b>Closures</b></i> s√£o um dos conceitos mais poderosos e at√© importante, eles permitem que a fun√ß√µes ‚Äúlembrem‚Äù e acessem vari√°veis de seu escopo l√©xico, mesmo depois  a execu√ß√£o da fun√ß√£o externa ter sido finalizada.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "O <i><b>Destructuring</b></i> √© uma sintaxe no ES6 que extrair valores de arrays ou objetos de forma mais leg√≠vel.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "O <i><b>Spread/Rest Operator</b></i> √© nada menos que <b>(...)</b> serve para espalhar ou agrupar elementos. O <b>Spread</b> √© usado para expandir elementos de um array ou objeto, enquanto o <b>Rest</b> √© usado para agrupar m√∫ltiplos argumentos em um √∫nico array.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Agora o <i><b>Template Literals</b></i> o template strings √© somente uma √°rea de adicionamento de express√£o vari√°vel, representado dessa forma <b>(${})</b>. S√£o uma sintaxe introduzida no ES6 que cria de forma flex√≠vel e poderosa, pode ser usando <b>(``)</b> tamb√©m.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "E tamb√©m temos o <i><b>JSON(JavaScript Object Notation)</b></i> composto de <b>JSON.parse()</b> e junto com <b>JSON.stringify()</b>. O m√©todo <i>JSON.parse()</i> √© usado para converter uma string JSON v√°lida em um objeto JavaScript. J√° o m√©todo <i>JSON.stringify()</i> converter um objeto JavaScript em uma string JSON, criando assim uma lista seriada de dados para compartilhamento e armazenamento.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "No <i><b>Web APIs</b></i> fornece interfaces pelos navegadores que permite e cria intera√ß√£o com recursos do sistema e funcionalidades avan√ßadas, com capacidades espec√≠ficas para desenvolvimento web. Os principais s√£o <b>localStorage</b>, <b>sessionStorage</b>, <b>setTimeout</b> e <b>setInterval</b>. No <i>localStorege</i> permite armazenar dados no navegador do usu√°rio, como se fosse um cookies, s√≥ que n√£o expiram at√© ser diretamente removidos, tem maior capacidade at√© mais de 5MB e n√£o s√£o enviados automaticamente em requisi√ß√µes. J√° no <i>sessionStorage</i> e umas da forma de armazenar dados temporariamente para sess√£o atual da aba  do navegador e quando fecha a aba os dados se apagam automaticamente, e l√≥gico cada aba tem seu pr√≥prio sessionStorage. E no <i>setTimeout</i> √© uma fun√ß√£o para executar uma a√ß√£o em um tempo exato contabilizado em <b>milissegundos</b>. Em ultimo o <i>setInterval</i> √© um pouco diferente do <b>setTimeout</b> esse executa repetidamente em um intervalo de tempo definido.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "Em ultimo t√≥pico <i><b>Strict Mode</b></i> ele √© fundamental para tornar o c√≥digo JavaScript mais seguro, evitando assim m√°s pr√°ticas. O c√≥digo em si √© <b>(use strict)</b> o mesmo √© rigoroso e evitar erros e deixa limpo o executar do c√≥digo em si.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "<i><b>Saber JavaScript √© fundamental, pois √© a linguagem base do Node, sem o conhecimento  √© envi√°vel o uso do mesmo. Assim recomendo apender pelo menos o b√°sico de JavaScript puro front-end para come√ßar ter as primeiras experiencias no back-end atrav√©s do NodeJS.</b></i>",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Diferen√ßas entre CommonJS e ESModules",
                        "descricao": "Aprenda as diferen√ßas entre os sistemas de m√≥dulos CommonJS e ESModules, e como cada um √© usado no Node.js.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "texto": "Nesse t√≥pico vamos falar primeiro do <i><b>CommonJS</b></i>, atualmente e principalmente √© usado em NodeJS, mas j√° foi usado em JavaScript, ele √© um sistema de m√≥dulos tradicional que permite organizar e compartilhar trecho de c√≥digo entre arquivos JavaScript. Foi criado para trazer familiaridade e modularidade fora do navegador. Temos dois c√≥digos principais e fundamentas o <b>require()</b> que tem como inten√ß√£o importar m√≥dulos, e <b>module.exports/exports</b> que a funcionalidade √© exportar m√≥dulo, literalmente o inverso do anterior falado.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "O mais atual e utilizada no Front-End JavaScript/Navegador √© o <i><b>ES Modules</b></i>, esse sistema √© mais moderno, introduzido em 2015. Permite organizar o c√≥digo em arquivos separados de maneira eficiente, simples e pratico quanto em navegadores e Node. Os c√≥digos principais s√£o muito similares a do Common, √© <b>import</b> que tem como finalidade importar m√≥dulos e <b>export</b> que √© exportar fun√ß√µes, vari√°veis ou objetos.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "J√° respondendo com a quest√£o presente no titulo, as diferen√ßas est√£o em como lidar com a modulariza√ß√£o do projeto em si. Ambos organiza os c√≥digos praticamente da mesma forma, s√≥ abordagens visuais distintas. Como caracter√≠sticas o <b>CommonJS(require/module.exports)</b>, j√° <b>ES Modules(import/export)</b>. Na origem o <b>Commonjs foi desenvolvido pelo NodeJS</b>, j√° o <b>ES Modules foi desenvolvida e oficializada pelo JavaScript</b>. O carregamento do Commonjs √© <b>s√≠ncrono(bloqueante)</b>, j√° do ES Modules √© <b>Ass√≠ncrono(n√£o bloqueante)</b>. No navegador o CommonJS <b>n√£o √© suportado nativamente</b>, j√° o ES Modules <b>sim √© suportado nativamente</b>. Especificamente no NodeJS os dois tipos √© usado, o CommonJS nativo e o ES Modules usando o ‚Äútype‚Äù: ‚Äúmodule‚Äù ou o .mjs. Em quest√£o de importa√ß√£o din√¢mica o CommonJS com o seu <b>requerie() pode ser chamado dinamicamente</b>, mas o ES Modules por ser mais moderno com o seu <b>import() tens mais retornos em suas Promise, al√©m de ser din√¢mico</b>. O CommonJS na analise est√°tica <b>√© muito dif√≠cil permitir o  require em uma condicional</b>, j√° o ES Modules <b>sai ganhando nessa, pois o seus imports/export s√£o est√°ticos e isso traz mais permiss√µes</b>. Tendo toda essa no√ß√£o, conseguimos ver que cada um tens suas peculiaridades, o CommonJS tem uma ampla ado√ß√£o no NodeJS muitos pacotes npm usam de forma fundamentas, permite require din√¢mico e mais simples em projetos legados. J√° o ES Modules √© padr√£o moderno JavaScript, melhor desempenho por causa do carregamento ass√≠ncrono e compat√≠vel com praticamente todos os navegadores. <b>Conclus√£o o CommonJS √© tradicional principalmente no nodeJS por isso ainda est√° forte seu uso, mas aos poucos est√° sendo substituindo, pelo futuro ES Modules do JavaScript</b>.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        },
        {
            "titulo": "üìÇ Manipula√ß√£o de Arquivos e M√≥dulos",
            "descricao": "Explore o sistema de m√≥dulos do Node.js, aprenda a criar e importar m√≥dulos pr√≥prios e manipule arquivos utilizando o m√≥dulo fs para leitura e escrita.",
            "pathImgModulo": "",
            "categoria": "Arquivos",
            "duracao": "1h",
            "colors": {
                "main": "#9D5816",
                "background": "#EBD4BE"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "Conceito de M√≥dulos do Node.js",
                        "descricao": "Entenda o conceito de m√≥dulos no Node.js e como eles permitem a organiza√ß√£o e reutiliza√ß√£o de c√≥digo.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "",
                        "highlightColor": "#F28318",
                        "paragrafos": [
                            {
                                "texto": "Os m√≥dulos no Node.js, permite organizar e reutilizar o c√≥digo de forma separadas baseada no padr√£o CommonJS. M√≥dulos s√£o blocos de c√≥digos encapsulados que podem ser importados e exportados em diferentes partes de uma aplica√ß√£o JavaScript. Cada arquivo no Node.js √© como um m√≥dulo separado. Temos os M√≥dulos Nativos fornecidos pelo o pr√≥prio Node como o <b>fs, http, path</b> temos os M√≥dulos de terceiros como o <b>express, mongoose, nodemon,pw2</b> e temos o m√≥dulos locais que o pr√≥prio desenvolvedor criar em suas aplica√ß√µes.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "As vantagens de seguir esse padr√£o √© as organiza√ß√£o do c√≥digo executando assim uma separa√ß√£o l√≥gica -racional de funcionalidades, a reutiliza√ß√£o do mesmo c√≥digos em varias partes e aplica√ß√µes do mesmo desenvolvedor, o oferecimento da facilidade e da manuten√ß√£o do projeto em si, e encapsulamento dessa estrat√©gia, pois vari√°veis e fun√ß√µes ficam isoladas no mesmo m√≥dulos em quest√µes.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Depend√™ncias",
                        "descricao": "Aprenda como gerenciar depend√™ncias externas em seu projeto e utiliz√°-las atrav√©s de m√≥dulos no Node.js.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "No Node.JS o npm ou yarn para gerenciar depend√™ncia externas, caso j√° tenha um package.json configurado √© s√≥ utilizar o <b>npm install</b>. Depois de instalado pode si usar o m√≥dulo si utilizando o <b>require</b>!",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/EX10-visual-ProjeCLP1.webp", "description": "Esse √© o c√≥digo base do modulo express para inicializar um server-back-end. Ainda est√° limpo sem nenhum conte√∫do!"},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/Ex11-Dep.webp", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/Ex12-Dep.webp", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Criar, exportar e importar m√≥dulos pr√≥prios",
                        "descricao": "Veja como criar seus pr√≥prios m√≥dulos, exportar funcionalidades e import√°-las em outros arquivos.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Manipula√ß√£o de arquivos utilizando o m√≥dulo fs para leitura e escrita",
                        "descricao": "Aprenda a utilizar o m√≥dulo fs do Node.js para ler e escrever arquivos de forma s√≠ncrona e ass√≠ncrona.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#68EC13",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        },
        {
            "titulo": "üåê Criando um Servidor Web com Express.js",
            "descricao": "Desenvolva um servidor web com Express.js, aprenda a definir rotas para diferentes m√©todos HTTP e utilize middlewares para processar requisi√ß√µes.",
            "pathImgModulo": "",
            "categoria": "Express.js",
            "duracao": "1h",
            "colors": {
                "main": "#49148B",
                "background": "#D2BEEB"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "Introdu√ß√£o ao Express.js",
                        "descricao": "Conhe√ßa o Express.js, um framework para Node.js, que facilita a cria√ß√£o de servidores e APIs com recursos poderosos e simplificados.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#7515ED",
                        "paragrafos": [
                            {
                                "texto": "Agora meu grande aluno, finalmente voc√™ chegou no n√≠vel aonde a magica do back acontece de fato. Aqui vamos te ensinar como inicializar o servidor Node.js. Vou te mostra 3 m√©todos de executar isso e te explicar porque praticamente todos os programadores usam o express para isso.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "O primeiro √© a declara√ß√£o original do node.js n√£o √© muito usado por n√£o ser t√£o intuitiva e mais longa e  complexas, e tamb√©m n√£o tem o recurso intuitivo da manipula√ß√£o de direcionamento da url.",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/Declara√ß√£o-original.webp", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "texto": "Nesse c√≥digo padr√£o temos o m√≥dulo nativo <b>http</b> que est√° sendo atribu√≠da para a vari√°vel http isso na linha 1, j√° na linha 3 temos a <b>const server</b> sendo atribu√≠da as propriedades do <b>http m√©todo createServer</b>. j√° o <b>server</b> na linha 11, novamente sendo atribuindo as propriedades do <b>listen</b> e dentro das suas fun√ß√£o as configura√ß√µes de rede que sera configurado no node e as suas rea√ß√µes de resposta que est√° sendo declara dentro da <b>function</b>.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "J√° o segundo exemplo deriva de novo m√©todo que est√° presente no site oficial do Node.js, que agora utiliza do m√©todo <b>Import</b> em vez do <b>require()</b>. Os dois funciona perfeitamente!",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/index-original-atualizada.webp", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "texto": "Aqui no novo index, usamos o <b>import</b> em vez do <b>require</b> e chamamos o modulo atravez do <b>from</b>. J√° o resto √© exatamente igual ao anterior.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "No express √© modulo que comprime e facilita a vida do programador fragmentando o site back-end em blocos dentro do c√≥digo.",
                                "pathImgInferior": {"path": "/assets/webp/exemplo/Ex-declara√ß√£o-express.webp", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "texto": "Agora sim, chagamos no express, o modulo mais usado nos projetos gerais. Diferente da nova declara√ß√£o o express usa a chamada padr√£o do node, o <b>const server</b> sendo atribuindo as propriedades <b>require(‚Äòexpress‚Äô)</b> e o <b>const app</b> sendo atribu√≠da as propriedades <b>server()</b>. J√° o principal diferencial desse modulo √© a sua capacidade de trazer facilidade de manipula√ß√£o de url, especificamente os seus diret√≥rios ap√≥s os dom√≠nios. <b>app.get</b> aqui voc√™ est√° chamando as propriedades do express voltado a obten√ß√£o do fron-end, <b>(‚Äò/‚Äô</b> aqui voc√™ est√° especificando o diret√≥rio que vai desenvolver, j√° a virgula(<b>,</b>) √© logicamente √© a separa√ß√£o dos par√¢metros.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "texto": "<b>function(entrada, saida){}</b> aqui a <b>function</b> tem dois par√¢metros fundamentas que precis√£o de estrema aten√ß√£o. A <b>entrada</b> ela receber diversos atributos do front-end que merece sua absoluta observa√ß√£o, pois √© fundamento para a manipula√ß√£o do mesmo. J√° a <b>sa√≠da</b> ela tem como fundamento enviar atributos para o front-end, o mesmo que voc√™ atribui no corpo da sua function.",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Desenvolva um servidor web com Express.js",
                        "descricao": "Aprenda a criar um servidor web b√°sico utilizando o Express.js, configurando rotas e respondendo a requisi√ß√µes HTTP.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Conceitos de defini√ß√µes de rota",
                        "descricao": "Entenda o conceito de rotas no Express.js, como defini-las e manipul√°-las para responder a diferentes tipos de requisi√ß√µes.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        },
        {
            "titulo": "üîß Trabalhando com Banco de Dados",
            "descricao": "Conecte sua aplica√ß√£o a bancos de dados MySQL ou Firebase, aprenda a realizar consultas e opera√ß√µes b√°sicas para armazenar e recuperar informa√ß√µes.",
            "pathImgModulo": "",
            "categoria": "Banco de Dados",
            "duracao": "1h",
            "colors": {
                "main": "#14538A",
                "background": "#9DBFDD"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "Conceitos b√°sicos do banco de dados SQL",
                        "descricao": "Aprenda o que √© Banco de Dados e alguns dos conceitos fundamentais de bancos de dados relacionais SQL, como tabelas, chaves prim√°rias e SQL queries.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1ABBE8",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Conecte sua aplica√ß√£o ao banco de dados MySQL",
                        "descricao": "Veja como conectar seu projeto Node.js a um banco de dados MySQL e realizar opera√ß√µes b√°sicas de leitura e escrita.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Conceitos b√°sicos do banco de dados NoSQL",
                        "descricao": "Entenda os princ√≠pios dos bancos de dados NoSQL, como a flexibilidade e escalabilidade, e como eles se diferenciam dos SQL.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Primeiros passos com Firebase",
                        "descricao": "Explore o Firebase, sua configura√ß√£o e como ele pode ser usado para armazenar dados em tempo real no seu projeto.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#68EC13",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Conecte sua aplica√ß√£o ao banco de dados Firebase",
                        "descricao": "Aprenda a integrar seu aplicativo Node.js com o Firebase para criar e ler dados de forma eficiente.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#F28318",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        },
        {
            "titulo": "üîÑ APIs RESTful com Node.js",
            "descricao": "Estruture uma API RESTful completa com Express.js, implemente um CRUD funcional e aprenda a enviar e receber dados em formato JSON.",
            "pathImgModulo": "",
            "categoria": "APIs",
            "duracao": "1h",
            "colors": {
                "main": "#870F36",
                "background": "#E1B6C4"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "Conceitos de API",
                        "descricao": "Entenda o que s√£o APIs, sua import√¢ncia e como elas permitem a comunica√ß√£o entre diferentes sistemas e aplicativos.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#EA1A5E",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "O que s√£o APIs RESTful",
                        "descricao": "Aprenda sobre APIs RESTful, seus princ√≠pios e como elas utilizam m√©todos HTTP para operar em recursos de maneira eficiente.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Estrutura√ß√£o de uma API RESTful com Express.js",
                        "descricao": "Descubra como estruturar uma API RESTful com o Express.js, criando rotas e manipulando requisi√ß√µes e respostas.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "O que √© CRUD?",
                        "descricao": "Compreenda o conceito de CRUD (Create, Read, Update, Delete) e sua aplica√ß√£o em sistemas de gerenciamento de dados.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#68EC13",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Implemente um sistema CRUD funcional com Node.js",
                        "descricao": "Aprenda a implementar um sistema CRUD completo usando Node.js, Express.js e um banco de dados para persistir dados.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#F28318",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "O que √© JSON?",
                        "descricao": "Saiba o que √© o JSON (JavaScript Object Notation) e como ele √© usado para troca de dados entre servidor e cliente.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#7515ED",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Enviar e receber dados em formato JSON",
                        "descricao": "Aprenda como enviar e receber dados em formato JSON em uma API, utilizando o Express.js para facilitar a comunica√ß√£o.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1A88E8",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        },
        {
            "titulo": "üéØ Deploy e Boas Pr√°ticas",
            "descricao": "Gerencie vari√°veis de ambiente com dotenv, utilize Git para versionamento do c√≥digo e publique sua aplica√ß√£o na internet usando a plataforma Vercel.",
            "pathImgModulo": "",
            "categoria": "Deploy",
            "duracao": "1h",
            "colors": {
                "main": "#133C7A",
                "background": "#D1D5DB"
            },
            "conteudos": {
                "sessoes": [
                    {
                        "titulo": "O que s√£o vari√°veis de ambiente",
                        "descricao": "Entenda o conceito de vari√°veis de ambiente, sua import√¢ncia para a configura√ß√£o de aplica√ß√µes e como elas ajudam a manter informa√ß√µes sens√≠veis fora do c√≥digo.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1265E2",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Gerenciamento de vari√°veis de ambiente no Node.js com a biblioteca dotenv",
                        "descricao": "Aprenda a usar a biblioteca dotenv no Node.js para carregar vari√°veis de ambiente de um arquivo .env, mantendo a seguran√ßa e flexibilidade no seu projeto.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#1283F4",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "O que √© Git e a import√¢ncia do versionamento de c√≥digo",
                        "descricao": "Compreenda o Git, suas funcionalidades e como o versionamento de c√≥digo ajuda na colabora√ß√£o e controle de mudan√ßas no seu projeto.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#E71A1A",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Introdu√ß√£o ao GitHub e configura√ß√£o do GitHub no VS Code",
                        "descricao": "Saiba como usar o GitHub para hospedar reposit√≥rios e configurar o Git no VS Code, facilitando o controle de vers√£o e o trabalho em equipe.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#68EC13",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    },
                    {
                        "titulo": "Conceitos de Deployment e como realizar o Deploy de uma aplica√ß√£o Node.js na plataforma Vercel",
                        "descricao": "Entenda o que √© deployment e como realizar o deploy de uma aplica√ß√£o Node.js utilizando a plataforma Vercel para tornar sua aplica√ß√£o acess√≠vel online.",
                        "pathImgSessao": {"path": "/assets/webp/CAPA CURSO.webp", "description": ""},
                        "pathVideoSessao": "https://www.youtube.com/watch?v=vYekSMBCCiM",
                        "highlightColor": "#F28318",
                        "paragrafos": [
                            {
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            },
                            {
                                "subtitulo": "",
                                "pathImgSuperior": {"path": "", "description": ""},
                                "pathVideoSuperior": "",
                                "texto": "",
                                "pathImgInferior": {"path": "", "description": ""},
                                "pathVideoInferior": ""
                            }
                        ]
                    }
                ]
            }
        }
    ]
}